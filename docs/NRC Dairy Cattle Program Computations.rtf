{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 02020603050405020304}TIMES;}
{\f5\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}HELVETICA;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva;}
{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}
{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York;}{\f13\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}
{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f16\froman\fcharset177\fprq2{\*\panose 00000000000000000000}Times New Roman (Hebrew);}
{\f17\froman\fcharset178\fprq2{\*\panose 00000000000000000000}Times New Roman (Arabic);}{\f18\froman\fcharset238\fprq2 Times New Roman CE;}{\f19\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f21\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f22\froman\fcharset162\fprq2 Times New Roman Tur;}{\f23\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f24\fswiss\fcharset238\fprq2 Arial CE;}{\f25\fswiss\fcharset204\fprq2 Arial Cyr;}{\f27\fswiss\fcharset161\fprq2 Arial Greek;}
{\f28\fswiss\fcharset162\fprq2 Arial Tur;}{\f29\fswiss\fcharset186\fprq2 Arial Baltic;}{\f30\fmodern\fcharset238\fprq1 Courier New CE;}{\f31\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f33\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f34\fmodern\fcharset162\fprq1 Courier New Tur;}{\f35\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f42\froman\fcharset238\fprq2 TIMES CE;}{\f43\froman\fcharset204\fprq2 TIMES Cyr;}{\f45\froman\fcharset161\fprq2 TIMES Greek;}
{\f46\froman\fcharset162\fprq2 TIMES Tur;}{\f47\froman\fcharset186\fprq2 TIMES Baltic;}{\f48\fswiss\fcharset238\fprq2 HELVETICA CE;}{\f49\fswiss\fcharset204\fprq2 HELVETICA Cyr;}{\f51\fswiss\fcharset161\fprq2 HELVETICA Greek;}
{\f52\fswiss\fcharset162\fprq2 HELVETICA Tur;}{\f53\fswiss\fcharset186\fprq2 HELVETICA Baltic;}{\f108\fswiss\fcharset238\fprq2 Tahoma CE;}{\f109\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f111\fswiss\fcharset161\fprq2 Tahoma Greek;}
{\f112\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f113\fswiss\fcharset186\fprq2 Tahoma Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \cgrid 
\snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\*\cs15 \additive \sbasedon10 line number;}{\s16\qc\widctlpar\adjustright \b\cgrid \sbasedon0 \snext16 Title;}{\s17\qc\widctlpar\adjustright \i\cgrid \sbasedon0 \snext17 Subtitle;}}{\*\revtbl {Unknown;}}{\info
{\title Option Explicit}{\author Vajesh Durbal}{\operator SNelson}{\creatim\yr2000\mo12\dy22\hr12\min6}{\revtim\yr2000\mo12\dy22\hr12\min6}{\version2}{\edmins0}{\nofpages93}{\nofwords15433}{\nofchars-32766}{\*\company Cornell University}{\nofcharsws0}
{\vern113}}\margl1440\margr1440 \widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot \fet0\sectd 
\psz1\linemod1\linex0\linecont\endnhere\sectlinegrid96\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}
{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s16\qc\widctlpar\adjustright \b\cgrid {National Research Council
\par }\pard\plain \s17\qc\widctlpar\adjustright \i\cgrid {Nutrient Requirements of Dairy Cattle, Seventh Revised Edition
\par }\pard\plain \qc\widctlpar\adjustright \cgrid {Model Computational Code
\par }\pard \widctlpar\adjustright {
\par Below are the computational equations in the computer model accompanying }{\i Nutrient Requirements of Dairy Cattle}{
 (2001). The program was written in Visual Basic, version 6.0 and was programmed by Vajesh Durbal.  Information on variables can be found in the Glossary in the accompanying report as can the rationale used by the subcommittee to develop the model.
\par 
\par The model is divided into submodels to compute requirements for minerals (line 689), reserves (line 1901), young calves (line 2151), growth (line 2564), maintenance (line 2659), target weight (line 3653), lactation (line 3723
) and pregnancy (line 3761). The submodels for calculation of nutrient supply are DietEvalOne (line 1663), DietEvalTwo (line 1970), Intake (line 2873), Amino Acids (line 3005), Energy and Protein Supply (line 3466), and Energy Values (line 3801). Lines 1-
 594 include definition of both public and private (those used in computations but not shown as output) variables. These line values are approximate because they are affected by the margin width and page layout of your word processor.
\par 
\par 
\par ' Program parameters
\par Public NumFeeds As Byte         ' keeps track of the total number of
\par                                 ' feeds loaded by the user
\par 
\par Public FeedNum As Byte          ' keeps track of the current feed
\par                                 ' selected (e.g. for Edit Feed Comp)
\par 
\par 
\par ' Program Settings variables
\par Public Metric As Boolean            ' True = Metric units, False = English units
\par Public DryMatterBasis As Boolean    ' True = Dry Matter Basis
\par Public Comments As String
\par Public Header(1 To 3) As String     ' Header(1) = Left, Header(2) = Center, Header(3) = Right
\par Public Footer(1 To 3) As String     ' Footer(1) = Left, Footer(2) = Center, Footer(3) = Right
\par Public SumRes(0 To 9) As String     ' Summary Results
\par Public DefaultZoom As String
\par 
\par 
\par ' Animal Description variables
\par Public AnimalType As String     ' Options : "Lactating Cow", "Dry Cow"
\par                                 ' "Replacement Heifer", "Young Calf"
\par Public Age As Single            ' age  (months)
\par Public BW As Single             ' body weight
\par Public DaysPreg As Integer      ' days pregnant
\par Public CS As Single             ' condition score (1 - 5)
\par Public DaysInMilk As Integer    ' days in milk
\par Public LactNum As Byte          ' lactation number
\par Public FirstCalf As Single      ' age at first calving  (months)
\par Public CalfInt As Single        ' calving interval  (months)
\par Public DesiredADG As Integer    ' desired ADG (g/day)
\par Public UseTargetADG As Boolean  ' if True, indicates that program should
\par                                 ' use Target ADG, instead of Desired ADG to
\par                                 ' determine growth requirements
\par                                 
\par Public CalfBW As Single         ' Calf Body Weight (kg)
\par Public CalfTemp As Single       ' Calf Temperature (deg C)
\par 
\par 
\par 
\par ' Animal Production variables
\par Public MW As Single                 ' mature weight
\par Public MWFromBreed As Boolean       ' indicates if the animal's MW should
\par                                     ' be set as a function of the breed
\par Public Breed As String              ' Choices :  "Ayrshire", "Brown Swiss"
\par                                     ' "Guernsey", "Holstein", "Jersey"
\par Public CBW As Single                ' calf birth weight
\par Public CBWFromMW As Boolean         ' to compute CBW from MW
\par Public MilkProd As Single           ' milk production
\par Public MilkFat As Single            ' milk fat  (%)
\par Public ShowMilkTrue As Boolean      ' indicates if milk protein should be shown
\par                                     ' on a true or crude basis
\par Public MilkTrueProtein As Single    ' milk true protein (%)
\par Public Lactose As Single            ' milk lactose (%)
\par 
\par 
\par 
\par ' Management and Environment variables
\par Public Temp As Single           ' current temperature
\par Public PrevTemp As Single       ' previous temperature
\par Public WindSpeed As Single
\par Public Grazing As Boolean
\par Public Distance As Single       ' Distance between Pasture and Milking Center
\par Public Topography As String     ' "Flat", "Hilly"
\par Public Trips As Integer         ' Number of one-way trips
\par Public CoatCond As String       ' Choices :  "Clean/Dry", "Some Mud"
\par                                 ' "Wet/Matted", "Covered with Snow/Mud"
\par Public HeatStress As String     ' "None", "Rapid/Shallow", "Open Mouth"
\par Public HairDepth As Single      ' depth of hair on coat
\par Public NightCooling As Boolean  ' True = Night Cooling, False = None
\par 
\par 
\par 
\par 
\par ' Feed Components
\par Type FeedType
\par 
\par   DMFed As Single           ' Quantity of this feed fed to the animal (dry matter basis)
\par   Name As String            ' name of the feed (e.g. "Corn Silage, mature")
\par   ReadOnly As Boolean       ' is "True" if the feed is part of the original library
\par   Category As String        ' feed category (e.g. Forage, Grass, Animal Product,...)
\par   IFN As String             ' International Reference Number
\par   TDN As Single             ' total digestible nutrients (%DM) at 1X Maintenance
\par   EnergyEqClass As String   ' "Forage", "Concentrate" or "Animal"
\par   ForageDescrp As String    ' "Wet" vs. "Dry"
\par   PAF As Single             ' processing adjustment factor
\par   DE As Single              ' digestible energy (Mcal)
\par   DM As Single              ' dry matter (%AF)
\par   NDF As Single             ' neutral detergent fiber (%DM)
\par   ADF As Single             ' acid detergent fiber (%DM)
\par   Lignin As Single          ' (% DM)
\par   CP As Single              ' crude protein (%DM)
\par   NDFIP As Single           ' (%DM)
\par   ADFIP As Single           ' (%DM)
\par   PrtA As Single            ' (%CP)
\par   PrtB As Single            ' (%CP)
\par   PrtC As Single            ' (%CP)
\par   Kd As Single              ' Protein Digestion rate (%/hr)
\par   RUPDigest As Single       ' (%)
\par   Fat As Single             ' (%DM)
\par   Ash As Single             ' (%DM)
\par   Ca As Single              ' (%DM)
\par   CaBio As Single           ' Bioavailablity of Ca in the feed (%)
\par   P As Single               ' (%DM)
\par   PBio As Single            ' Bioavailablity of P in the feed (%)
\par   Mg As Single              ' (%DM)
\par   MgBio As Single           ' Bioavailablity of Mg in the feed (%)
\par   Cl As Single              ' (%DM)
\par   ClBio As Single           ' Bioavailability of Cl in the feed (%)
\par   K As Single               ' (%DM)
\par   KBio As Single            ' Bioavailability of K in the feed (%)
\par   Na As Single              ' (%DM)
\par   NaBio As Single           ' Bioavailability of Na in the feed (%)
\par   s As Single               ' (%DM)
\par   SBio As Single            ' Bioavailability of S in the feed (%)
\par   Co As Single              ' (mg/kg)
\par   CoBio As Single           ' Bioavailability of Co in the feed (%)
\par   Cu As Single              ' (mg/kg)
\par   CuBio As Single           ' Bioavailability of Cu in the feed (%)
\par   I As Single               ' (mg/kg)
\par   IBio As Single            ' Bioavailability of I in the feed (%)
\par   Fe As Single              ' (mg/kg)
\par   FeBio As Single           ' Bioavailability of Fe in the feed (%)
\par   Mn As Single              ' (mg/kg)
\par   MnBio As Single           ' Bioavailability of Mn in the feed (%)
\par   Se As Single              ' (mg/kg)
\par   SeBio As Single           ' Bioavailability of Se in the feed (%)
\par   Zn As Single              ' (mg/kg)
\par   ZnBio As Single           ' Bioavailability of Zn in the feed (%)
\par   Met As Single
\par   Lys As Single
\par   Arg As Single
\par   His As Single
\par   Ile As Single
\par   Leu As Single
\par   Cys As Single
\par   Phe As Single
\par   Thr As Single
\par   Trp As Single
\par   Val As Single
\par   VitA As Single            ' (1000 IU/kg)
\par   VitD As Single            ' (1000 IU/kg)
\par   VitE As Single            ' (IU/kg)
\par   NFCDigest As Single       ' NFC Digestibility Coefficient
\par   CPDigest As Single        ' CP Digestibility Coefficient
\par   NDFDigest As Single       ' NDF Digestibility Coefficient
\par   FatDigest As Single       ' Fat Digestibility Coefficient
\par   
\par   
\par   
\par   ' The following characteristics apply to Calf Feeds only
\par   ' the "c" prefix is given to any characteristics that have
\par   ' non-calf counterparts (e.g. "cMEng")
\par   cDM As Single              ' (%AF)
\par   cGE As Single              ' (Mcal/kg DM)
\par   cDE As Single              ' (Mcal/kg DM)
\par   cMEng As Single            ' (Mcal/kg DM)
\par   cNEm As Single             ' (Mcal/kg DM)
\par   cNEg As Single             ' (Mcal/kg DM)
\par   cCP As Single              ' (%DM)
\par   cDCP As Single             ' (%DM)
\par   cEE As Single              ' (%DM)
\par   cAsh As Single             ' (%DM)
\par   
\par   
\par   ' Computed compositional values
\par   TDN_ActX As Single        ' TDN at Intake Over Maintenance
\par   DiscDE As Single          ' Discounted DE (Mcal/kg)
\par   MEforNEg As Single        ' efficiency of conversion of ME to NEg
\par   MEng As Single            ' *** ME - metabolizable energy (Mcal/kg) ***
\par   NEl As Single             ' *** net energy of lactation (Mcal/kg) ***
\par   NEg As Single             ' *** net energy of growth (Mcal/kg) ***
\par   NEm As Single             ' *** net energy for maintenance (Mcal/kg) ***
\par End Type
\par 
\par 
\par 
\par ' Feed/Ration Variables
\par Public Feed() As FeedType
\par Public TotalDMFed As Single        ' Total quantity of dry matter fed (kg/day)
\par Public TotalRegDMFed As Single     ' Total quantity of regular feed (i.e. non-calf feed) DM Fed (kg/day)
\par Public PredIntake As Single
\par 
\par 
\par 
\par ' Mineral Name Constants
\par Public Enum Minerals
\par   Ca = 1
\par   P
\par   Mg
\par   Cl
\par   K
\par   Na
\par   Su
\par   Co
\par   Cu
\par   Io
\par   Fe
\par   Mn
\par   Se
\par   Zn
\par   Mo
\par   VitA
\par   VitD
\par   VitE
\par End Enum
\par 
\par 
\par 
\par 
\par 
\par ' Output Variables
\par 
\par 
\par 
\par ' Pregnancy Requirements
\par Public Km As Single                 ' diet NEl/diet NE  =  efficiency of use of ME for Maintenance
\par Public MEPreg As Single             ' metabolizable energy requirement for pregnancy (Mcal/day)
\par Public NEPreg As Single             ' net energy required for pregnancy (Mcal/day)
\par Public MPPreg As Single             ' metabolizable protein requirement for pregnancy (g/day)
\par Public CPPreg As Single             ' crude protein requirement for pregnancy (g/day)
\par Public CW As Single                 ' conceptus weight (kg)
\par Public ADGPreg As Single            ' average daily gain due to conceptus growth (g/day)
\par 
\par 
\par 
\par ' Lactation Requirements
\par Public MilkEn As Single                  ' energy content of milk (Mcal NEl/kg)
\par Public YEn As Single                ' daily energy secretion in milk (Mcal NEl/day)
\par Public NELact As Single             ' net energy requirement for lactation (Mcal/day)
\par Public YProtn As Single             ' daily milk protein yield at current stage of lactation (kg/day)
\par Public YFatn As Single              ' daily milk fat yield at current stage of lactation (kg/day)
\par Public MPLact As Single             ' metabolizable protein requirement for lactation (g/day)
\par Public FCM As Single                ' fat corrected milk production (kg/day)
\par 
\par 
\par 
\par ' Target Weights and ADG for Breeding Females
\par Public Age1st As Single             ' age at first calving = FirstCalf  (mon)
\par Public Age2nd As Single             ' age at second calving (mon)
\par Public Age3rd As Single             ' age at third calving (mon)
\par Public Age1stBred As Single         ' age at first breeding (mon)
\par Public Wt1st As Single              ' target weight at first calving (kg)
\par Public Wt2nd As Single              ' target weight at second calving (kg)
\par Public Wt3rd As Single              ' target weight at third calving (kg)
\par Public Wt1stBred As Single          ' target weight at first breeding (kg)
\par Public ADG1st As Single             ' average daily gain at first calving (kg/day)
\par Public ADG2nd As Single             ' average daily gain at second calving (kg/day)
\par Public ADG3rd As Single             ' average daily gain at third calving (kg/day)
\par Public ADG1stBred As Single         ' average daily gain at first breeding (kg/day)
\par Public ADGNonBred As Single         ' average daily gain needed to get to ADG1stBred (kg/day)
\par Public ADG As Single                ' average daily gain for the cow, given the current characteristics (kg/day)
\par 
\par 
\par 
\par ' Reserves Requirements
\par Public CS_F(1 To 9) As Single       ' factor for condition score x
\par Public CS5EBW As Single             ' empty body weight of the animal for condition score 5 (kg)
\par Public EBW(1 To 9) As Single        ' empty body weight of the animal for condition score x (kg)
\par Public AF(1 To 9) As Single         ' proportion of fat in the animal at condition score x
\par Public TF(1 To 9) As Single         ' total weight of fat in the animal at condition score x (kg)
\par Public AP(1 To 9) As Single         ' proportion of protein in the animal at condition score x
\par Public TP(1 To 9) As Single         ' total weight of protein in the animal at condition score x (kg)
\par Public ER(1 To 9) As Single         ' energy reserves of the animal at condition score x (Mcal)
\par Public Lose1CS As Single            ' energy needed to lose one condition score (Mcal)
\par Public Gain1CS As Single            ' energy needed to gain one condition score (Mcal)
\par Public NElSub As Single             ' amount of retained energy that will be substituted for
\par                                     ' dietary NEl in order to lose one condition score (Mcal)
\par Public NElReq As Single             ' amount of energy dietary NEl will supply in
\par                                     ' order to gain one condition score (Mcal)
\par Public deltaER As Single            ' change in ER needed to move up or down one condition score (Mcal)
\par Public DaysToChange As Single       ' number of days needed to move up or down one condition score
\par 
\par 
\par 
\par ' Compute Energy Values
\par Public DMI_to_DMIMaint As Single    ' ratio of DMI to DMI required for maintenance
\par 
\par 
\par ' Energy and Protein Supply
\par ' N.B. Those variables that are arrays are for specific feeds.
\par ' For example DMI(2) will be the dry matter intake for Feed(2).
\par Public PsgRate() As Single          ' predicted passage rate
\par Public DMI() As Single              ' dry matter intake (kg/day)
\par Public TDN() As Single              ' total digestible nutrients (g/day)
\par Public TDN_Act() As Single          ' discounted total digestible nutrients (g/day)
\par Public CP() As Single               ' crude protein intake (g/day)
\par Public MEng() As Single             ' metabolizable energy (Mcal/day)
\par Public NEl() As Single              ' net energy for lactation (Mcal/day)
\par Public NEg() As Single              ' net energy for growth (Mcal/day)
\par Public RUP() As Single              ' ruminally undegradable intake protein (g/day)
\par Public RDP() As Single              ' ruminally degradable intake protein (g/day)
\par Public NDF() As Single              ' neutral detergent fiber (kg/day)
\par Public ADF() As Single              ' acid detergent fiber (kg/day)
\par Public DMI_Total As Single          ' total dry matter intake (kg/day)
\par Public TDN_Total As Single          ' total 1X-TDN intake (g/day)
\par Public TDN_Act_Total As Single      ' actual, discounted TDN intake (g/day)
\par Public Discount As Single           ' discounts energy value to adjust for intake
\par Public UndiscDE_Total As Single     ' total, undiscounted, DE intake (Mcal/day)
\par Public DE_Total As Single           ' total DE intake (Mcal/day)
\par Public Fat_Total As Single          ' total Fat intake (kg/day)
\par Public MEng_Total As Single         ' total ME intake (Mcal/day)
\par Public NEm_Total As Single          ' total NEm intake (Mcal/day)
\par Public NEl_Total As Single          ' total NEl intake (Mcal/day)
\par Public NEg_Total As Single          ' total NEg intake (Mcal/day)
\par Public CP_Total As Single           ' total crude protein intake (g/day)
\par Public RUP_Total As Single          ' total RUP intake (g/day)
\par Public TotalDigestedRUP As Single   ' total digested RUP (g/day)
\par Public DietRUPDigest As Single      ' total RUP digestibility for the diet (weighted average)
\par Public RDP_Total As Single          ' total RDP intake (g/day)
\par Public NDF_Total As Single          ' total NDF intake (g/day)
\par Public ADF_Total As Single          ' total ADF intake (g/day)
\par Public MCP_Total As Single          ' total MCP synthesis (g/day)
\par Public DietTDN As Single            ' fraction of TDN in the diet
\par Public NEgOverMEng As Single        ' NEg_Total/MEng_Total
\par Public NElOverMEng As Single        ' NEl_Total/MEng_Total
\par Public NEmOverMEng As Single        ' NEm_Total/MEng_Total
\par Public DietaryNFC As Single         ' total dietary NFC (g/day)
\par Public EndCP As Single              ' endogenous crude protein (g/day)
\par Public MPEndo As Single             ' endogenous metabolizable protein (g/day)
\par Public MPEndoReq As Single          ' MPEndo requirement (g/day)
\par 
\par 
\par 
\par ' Amino Acid Supply
\par Public perEAA As Single             ' percent total essential amino acids (%RUP)
\par Public TotalEAA As Single           ' total essential amino acids (g/day)
\par Public Arg_Flow As Single           ' flow of arginine to the small intestine (g/day)
\par Public His_Flow As Single           ' flow of histidine to the small intestine (g/day)
\par Public Ile_Flow As Single           ' flow of isoleucine to the small intestine (g/day)
\par Public Leu_Flow As Single           ' flow of leucine to the small intestine (g/day)
\par Public Lys_Flow As Single           ' flow of lysine to the small intestine (g/day)
\par Public Met_Flow As Single           ' flow of methionine to the small intestine (g/day)
\par Public Phe_Flow As Single           ' flow of phenylalanine to the small intestine (g/day)
\par Public Thr_Flow As Single           ' flow of threonine to the small intestine (g/day)
\par Public Val_Flow As Single           ' flow of valine to the small intestine (g/day)
\par Public Dig_Arg_Flow As Single       ' flow of digestible arginine to the small intestine (g/day)
\par Public Dig_His_Flow As Single       ' flow of digestible histidine to the small intestine (g/day)
\par Public Dig_Ile_Flow As Single       ' flow of digestible isoleucine to the small intestine (g/day)
\par Public Dig_Leu_Flow As Single       ' flow of digestible leucine to the small intestine (g/day)
\par Public Dig_Lys_Flow As Single       ' flow of digestible lysine to the small intestine (g/day)
\par Public Dig_Met_Flow As Single       ' flow of digestible methionine to the small intestine (g/day)
\par Public Dig_Phe_Flow As Single       ' flow of digestible phenylalanine to the small intestine (g/day)
\par Public Dig_Thr_Flow As Single       ' flow of digestible threonine to the small intestine (g/day)
\par Public Dig_Val_Flow As Single       ' flow of digestible valine to the small intestine (g/day)
\par Public ArgPctMP As Single           ' arginine as a percent of metabolizable protein (%)
\par Public HisPctMP As Single           ' histidine as a percent of metabolizable protein (%)
\par Public IlePctMP As Single           ' isoleucine as a percent of metabolizable protein (%)
\par Public LeuPctMP As Single           ' leucine as a percent of metabolizable protein (%)
\par Public LysPctMP As Single           ' lysine as a percent of metabolizable protein (%)
\par Public MetPctMP As Single           ' methionine as a percent of metabolizable protein (%)
\par Public PhePctMP As Single           ' phenylalanine as a percent of metabolizable protein (%)
\par Public ThrPctMP As Single           ' threonine as a percent of metabolizable protein (%)
\par Public ValPctMP As Single           ' valine as a percent of metabolizable protein (%)
\par 
\par 
\par 
\par 
\par ' Maintenance Requirements
\par Public a1 As Single                 ' thermal neutral maintenance requirement (Mcal/day/BW^0.75)
\par Public CS9 As Single                ' condition score on 1-9 scale (1996 NRC)
\par Public COMP As Single               ' effect of previous plane of nutrition on NEMaint requirement
\par Public a2 As Single                 ' maintenance adjustment for previous ambient temperature (Mcal/day/BW^0.75)
\par Public Pasture As Single            ' percent of the predicted dry matter intake supplied by grazing
\par Public NEmact As Single             ' activity factor on the NEMaint requirement
\par Public NEMaintNS As Single          ' net energy requirement for maintenance without stress (Mcal/day)
\par Public NEDietConc As Single         ' concentration of net energy in diet (kg DM/day)
\par Public FeedMaint As Single          ' feed required for maintenance (kg DM/day)
\par Public NEGrowthDietNS As Single     ' net energy for growth, with no stress, available in the diet (Mcal/day)
\par Public NEFP As Single               ' net energy for production (Mcal/day)
\par Public MEI As Single                ' metabolizable energy intake (Mcal/day)
\par Public SA As Single                 ' surface area (m^2)
\par Public HP As Single                 ' heat production (Mcal/m^2/day)
\par Public T As Single                  ' age in days
\par Public Coat As Single               ' coat condition factor (dependent on CoatCond)
\par Public TI As Single                 ' tissue insulation (Mcal/m^2/deg C/day)
\par Public EI As Single                 ' external insulation (Mcal/m^2/deg C/day)
\par Public INS As Single                ' total insulation (Mcal/m^2/deg C/day)
\par Public LCT As Single                ' lower critical temperature (deg C)
\par Public MEcs As Single               ' metabolizable energy required due to cold stress (Mcal/day)
\par Public ColdStr As Single            ' cold stress factor for computing the net energy requirement
\par                                     ' for maintenance with stress (Mcal/day/BW^0.75)
\par Public HeatStr As Single            ' heat stress factor for computing the net energy requirement
\par                                     ' for maintenance which is dependent upon the HeatStress variable
\par Public NEMaint As Single            ' net energy required for maintenance (Mcal/day)
\par Public DMIMaint As Single           ' dry matter intake required for maintenance (kg DM/day)
\par Public DMIPreg As Single            ' dry matter intake requirement for pregnancy
\par Public NEGrowthDiet As Single       ' net energy for growth available in the diet (Mcal/day)
\par Public MPMaint As Single            ' metabolizable protein requirement for maintenance (g/day)
\par Public MEMaint As Single            ' used only for Replacement Heifers
\par Public ScurfMP As Single            ' scurf MP requirement (g/day)
\par Public UrineMP As Single            ' urine MP requirement (g/day)
\par Public FecalMP As Single            ' fecal MP requirement (g/day)
\par 
\par 
\par 
\par ' Dry Matter Intake
\par Public TempFact As Single           ' temperature adjustment factor for DMI calculations
\par Public CCFact As Single             ' coat condition adjustment factor for DMI calculations
\par Public SubFact As Single            ' factor used in the DMI_RH calculation
\par Public DivFact As Single            ' factor used in the DMI_RH calculation
\par Public DMILact As Single            ' DMI of a lactating cow (kg/day)
\par Public DMIDry As Single             ' DMI of a dry cow  (kg/day)
\par Public DMI_RH As Single             ' DMI of a replacement heifer (kg/day)
\par Public DryMatterIntake As Single    ' dry matter intake (kg/day)
\par 
\par 
\par 
\par ' Growth Requirements
\par Public SBW As Single                ' shrunk body weight (kg)
\par Public SRW_to_MSBW As Single        ' standard reference weight / mature shrunk body weight
\par Public EQSBW As Single              ' equivalent shrunk body weight (kg)
\par Public SWG As Variant               ' shrunk weight gain (kg)
\par Public WG As Single                 ' weight gain (kg/day)
\par Public DLWReq As Single             ' DLW required (kg/day)
\par Public EQEBW As Single              ' equivalent empty body weight (kg)
\par Public EQEBG As Single              ' equivalent empty body gain (kg)
\par Public RE As Single                 ' retained energy (Mcal/day)
\par Public NEGrowth As Single           ' net energy required for growth (Mcal/day)
\par Public NPg As Single                ' net protein requirement (g/day)
\par Public EffMP_NPg As Single          ' efficiency of use of MP for NPg
\par Public MPGrowth As Single           ' metabolizable protein requirement for growth (g/day)
\par Public NEReserves As Single         ' net energy required for reserves replenishment
\par                                     ' or provided when reserves are mobilized (Mcal NEl/day)
\par Public DMIAvailGrowth As Single     ' dry matter available for growth (kg/day)
\par Public ADGwoPreg As Single          ' average daily gain w/o pregnancy (kg/day)
\par Public ADGwPreg As Single           ' average daily gain with pregnancy (kg/day)
\par Public MEGrowth As Single           ' only used for Replacement Heifers
\par Public MEAllowGain As Single
\par Public MEAllowGainPreg As Single
\par 
\par 
\par 
\par 
\par ' Mineral Requirements
\par Type MineralType
\par   Name As String                    ' name of mineral
\par   Units As String                   ' units the mineral is reported in
\par   Fecal As Single                   ' fecal endogenous loss component
\par   Urine As Single                   ' urine endogenous loss component
\par   Sweat As Single                   ' sweat loss (temperature) component
\par   Misc As Single                    ' miscellaneous loss component
\par   Maint As Single                   ' sum of the misc, fecal, urine and sweat losses
\par   Fetal As Single                   ' fetal requirement
\par   Milk As Single                    ' milk production requirement
\par   Growth As Single                  ' heifer growth requirement
\par   Total As Single                   ' total quantity of mineral required
\par   Supplied As Single                ' total quantity of mineral supplied by the animal's diet
\par   Absorbable As Single              ' total quantity of absorbable mineral supplied by the diet
\par   Balance As Single                 ' difference between the quantity of the mineral required and supplied
\par   RD As Single                      ' density of the mineral in the animal's ration
\par   RDReq As Single                   ' ration density required
\par End Type
\par 
\par Public Mineral(Ca To VitE) As MineralType
\par 
\par 
\par 
\par ' Diet Evaluation
\par Type EvalType
\par    Name As String                 ' name of evaluation factor (e.g. NE-Diet)
\par    Units As String                ' units of evaluation factor (e.g. Mcal/day)
\par    Total As Single
\par    Maint As Single
\par    Preg As Single
\par    Lact As Single
\par    Gain As Single
\par    Reserves As Single
\par End Type
\par 
\par 
\par 
\par Public EvalFactor(1 To 6) As EvalType
\par ' The upper grid of the diet evaluation screen is represented
\par ' as these six Evaluation Factors.  They correspond to NE-Diet,
\par ' NE-Req, NE-Diff, MP-Diet, MP-Req, and MP-Diff.  It is possible
\par ' that the first three factors may be given in different energy
\par ' units, under certain conditions, which is another motivation
\par ' for this type of variable definition
\par 
\par Public DMIPred As Single            ' predicted dry matter intake (kg/day)
\par Public DMIActual As Single          ' actual dry matter intake (kg/day)
\par 
\par Public RDPReq As Single             ' RDP required (g/day)
\par Public RDPSup As Single             ' RDP supplied (g/day)
\par Public RDPBal As Single             ' difference between RDPReq and RDPSup (g/day)
\par Public RUPReq As Single             ' RUP required (g/day)
\par Public RUPSup As Single             ' RUP supplied (g/day)
\par Public RUPBal As Single             ' difference between RUPReq and RUPSup (g/day)
\par 
\par Public MPBalance As Single
\par Public ProteinInGain As Single
\par Public MPAllowGain As Single
\par Public MPAllowGainPreg As Single
\par 
\par Public CondMessage As String
\par 
\par Public MPBact As Single             ' metabolizable protein supplied by microbial protein (g/day)
\par Public MPFeed As Single             ' metabolizable protein supplied by animal's ration (g/day)
\par 
\par Public DietCP As Single             ' fraction of CP in the diet
\par Public CP_RDP As Single             ' fraction of CP which is RDP
\par Public CP_RUP As Single             ' fraction of CP which is RUP
\par 
\par Public DietNDF As Single            ' fraction of NDF in animal's ration
\par Public DietADF As Single            ' fraction of ADF in animal's ration
\par Public ForageNDF As Single          ' fraction of NDF from Forage in ration
\par Public DietME As Single             ' quantity of ME in animal's ration (Mcal/kg)
\par Public DietNEl As Single            ' quantity of NEl in animal's ration (Mcal/kg)
\par Public DietNEg As Single            ' quantity of NEg in animal's ration (Mcal/kg)
\par 
\par Public EnergyAllowableMilk As Single    ' energy allowable milk production (kg/day)
\par Public ProteinAllowableMilk As Single   ' protein allowable milk production (kg/day)
\par Public DailyMilk As Single              ' milk production (kg/day)
\par 
\par Public TargetADGwoPreg As Single    ' target ADG without pregnancy (kg/day)
\par Public TargetADGPreg As Single      ' target ADG with pregnancy (kg/day)
\par 
\par Public Reserves_WG As Single        ' weight gain due to reserves (kg)
\par 
\par Public MPReqReserves As Single      ' MP required for reserves (g/day)
\par Public MPProvReserves As Single     ' MP provided for reserves (g/day)
\par 
\par Public RUPReqReserves As Single     ' RUP required for reserves (g/day)
\par Public RUPProvReserves As Single    ' RUP provided for reserves (g/day)
\par 
\par Public Energy_TargetDietConc As Single
\par Public MP_TargetDietConc As Single
\par Public Ca_TargetDietConc As Single
\par Public P_TargetDietConc As Single
\par Public DCAD As Single
\par 
\par 
\par 
\par 
\par ' Young Calf Computation Variables
\par Public CalfKm As Single             ' Efficiency of use of ME for NEm
\par Public CalfKg As Single             ' Efficiency of use of ME for NEg
\par 
\par Public MilkDMI As Single            ' Milk Dry Matter Intake (kg/day)
\par Public StarterDMI As Single         ' Starter Dry Matter Intake (kg/day)
\par Public NEmCalf As Single            ' Net Energy required for maintenance (Mcal/day)
\par Public TempFactor As Single
\par 
\par Public CalfFat As Single            ' Dietary Fat (kg/day)
\par Public DietFatCalf As Single        ' Dietary Fat (%)
\par Public DietNEmCalf As Single        ' Dietary NEm (Mcal/kg)
\par Public DietMECalf As Single         ' Dietary ME  (Mcal/kg)
\par Public DietNEgCalf As Single        ' Dietary NEg (Mcal/kg)
\par Public DietCPCalf As Single         ' Dietary CP (%)
\par Public DietDCPCalf As Single        ' Dietary DCP (%)
\par Public DMIForNEmCalf As Single      ' Dry Matter Intake required to meet NEm requirement (kg/day)
\par Public DMIForMECalf As Single       ' Dry Matter Intake required to meet ME requirement  (kg/day)
\par Public DMIForGrowth As Single       ' Total dry matter intake used for growth  (kg/day)
\par Public MEFGCalf As Single           ' Metabolizable energy available for growth  (Mcal/day)
\par Public NEFGCalf As Single           ' Net Energy available for growth (Mcal/day)
\par Public EnergyADGCalf As Single      ' Energy allowable Average Daily Gain (kg/day)
\par Public ProteinReqCalf As Single     ' Protein allowable Average Daily Gain (kg/day)
\par Public BV As Single                 ' Biological value used in ADP calculation
\par Public EUN As Single                ' endogenous urinary nitrogen losses (g/day) used in ADP calculation
\par Public MFN As Single                ' metabolic fecal nitrogen (g/day), used in ADP calculation
\par Public ADPmaint As Single           ' apparently digested crude protein for maintenance (g/day)
\par Public ADPgrowth As Single          ' apparently digested crude protein for gain (g/day)
\par Public CPmCalf As Single            ' calf maintenance crude protein requirement (g/day)
\par Public CPgCalf As Single            ' calf growth crude protein required (g/day)
\par Public CalfADG As Single            ' Calf Average Daily Gain (g/day)
\par Public CalfADPBal As Single         ' digestible ADP Balance (g/day)
\par Public CalfCPBal As Single          ' digestible CP Balance (g/day)
\par Public ADPAllowGain As Single       ' ADP Allowable Gain (g/day)
\par 
\par Public Sub ModelComputations()
\par ' All of the model's computations are run by calling this procedure.
\par ' Different output is computed by separate computational routines, but
\par ' they are all called here.
\par 
\par ' Important Note :  All calculations in this model are made with metric units
\par 
\par 
\par 
\par ' Different set of computations are run if the animal
\par ' type is a Young Calf
\par If AnimalType = "Young Calf" Then
\par   
\par   If TotalDMFed = 0 Then
\par     Exit Sub
\par   End If
\par   
\par   ' Run Calf Computations
\par   Call CalfComputations
\par     
\par   ' Mineral Sub-Model Calculations
\par   Call MineralComputations
\par 
\par Else
\par 
\par   ' Run Pregnancy Sub-Model Calculations
\par   Call PregnancyComputations
\par   
\par   ' Lactation Sub-Model Calculations
\par   Call LactationComputations
\par  
\par   ' Target Weights and ADG for Breeding Females
\par   Call TargetWeightsComputations
\par 
\par 
\par   ' All of the remaining sub-models assume that the animal is being fed,
\par   ' so if no feeds are selected or the quantity fed is equal to zero,
\par   ' the computations finish here.
\par 
\par   If (NumFeeds = 0) Or (TotalDMFed = 0) Then
\par     'Don't run any more computations
\par     Exit Sub
\par 
\par   Else
\par 
\par     ' Energy and Protein Supply Calculations
\par     Call EnergyAndProteinSupplyComputations
\par 
\par     ' Amino Acid Supply Calculations
\par     Call AminoAcidComputations
\par 
\par     ' Dry Matter Intake Calculations
\par     Call DryMatterIntakeComputations
\par 
\par     ' Maintenance Sub-Model Calculations
\par     Call MaintenanceComputations
\par 
\par     ' Growth Sub-Model Calculations
\par     Call GrowthComputations
\par 
\par     ' Mineral Sub-Model Calculations
\par     Call MineralComputations
\par 
\par     ' Diet Evaluation Calculations - Part I
\par     '
\par     ' The Diet Evaluation Section is done in two parts.  The first
\par     ' part is needed to get the EnergyBalance (aka NE-Differ-Gain,
\par     ' aka EvalFactor(3).Gain), which is needed for the Reserves
\par     ' Calculations, which computes the DaysToChange variable, which
\par     ' is displayed in the Diet Evaluation Screen.
\par     Call DietEvalOneComputations
\par 
\par     ' Reserves Calculations
\par     Call ReservesComputations
\par 
\par     ' Diet Evaluation Calculations - Part II
\par     Call DietEvalTwoComputations
\par 
\par   End If
\par 
\par End If
\par 
\par 
\par End Sub
\par 
\par 
\par 
\par 
\par Private Sub MineralComputations()
\par 
\par Dim C As Integer
\par Dim d As Integer
\par 
\par Dim X As Integer
\par Dim MilkFeeds As Single
\par Dim CalfStarter As Single
\par Dim RegFeeds As Single
\par Dim m As Single
\par Dim n As Single
\par Dim o As Single
\par 
\par 
\par 
\par 
\par ' Calcium
\par 
\par   With Mineral(1)
\par     .Name = "Ca"
\par     .Units = "(g/d)"
\par     
\par     If DaysInMilk > 0 Then
\par       .Fecal = 3.1 * (BW / 100)
\par     Else
\par       .Fecal = 1.54 * (BW / 100)
\par     End If
\par     
\par     .Urine = 0.08 * (BW / 100)
\par     .Misc = 0
\par     .Sweat = 0
\par     
\par     If DaysPreg > 190 Then
\par       .Fetal = 0.02456 * Exp((0.05581 - (0.00007 * DaysPreg)) * DaysPreg) _
\par                   - 0.02456 * Exp((0.05581 - (0.00007 * (DaysPreg - 1))) * (DaysPreg - 1))
\par     Else
\par       .Fetal = 0
\par     End If
\par     
\par     
\par     Select Case DaysInMilk
\par       Case 0
\par         .Milk = 0
\par       Case Else
\par         Select Case Breed
\par           Case "Holstein", "Milking Shorthorn"
\par             .Milk = 1.22 * MilkProd
\par           Case "Jersey"
\par             .Milk = 1.45 * MilkProd
\par           Case Else
\par             .Milk = 1.37 * MilkProd
\par         End Select
\par     End Select
\par     
\par     
\par     If ((BW > 0) And (WG > 0)) Then
\par       .Growth = (9.83 * (MW ^ 0.22) * (BW ^ -0.22)) * (WG / 0.96)
\par     Else
\par       .Growth = 0
\par     End If
\par     
\par            
\par   End With
\par   
\par   
\par   
\par ' Phosphorus
\par 
\par   With Mineral(2)
\par     .Name = "P"
\par     .Units = "(g/d)"
\par     
\par     If InStr(AnimalType, "Cow") > 0 Then
\par       .Fecal = 1 * TotalDMFed
\par     Else
\par       .Fecal = 0.8 * TotalDMFed
\par     End If
\par     
\par     .Urine = 0.002 * BW
\par     .Misc = 0
\par     .Sweat = 0
\par           
\par     If DaysPreg >= 190 Then
\par       .Fetal = 0.02743 * Exp(((0.05527 - (0.000075 * DaysPreg)) * DaysPreg)) _
\par               - 0.02743 * Exp(((0.05527 - (0.000075 * (DaysPreg - 1))) * (DaysPreg - 1)))
\par     Else
\par       .Fetal = 0
\par     End If
\par     
\par     Select Case DaysInMilk
\par       Case 0
\par         .Milk = 0
\par       Case Else
\par         .Milk = 0.9 * MilkProd
\par     End Select
\par     
\par     
\par     If ((BW > 0) And (WG > 0)) Then
\par       .Growth = (1.2 + (4.635 * (MW ^ 0.22) * (BW ^ -0.22))) * (WG / 0.96)
\par     Else
\par       .Growth = 0
\par     End If
\par     
\par   End With
\par   
\par   
\par   
\par ' Magnesium
\par 
\par   With Mineral(3)
\par     .Name = "Mg"
\par     .Units = "(g/d)"
\par     
\par     .Fecal = 0.003 * BW
\par     
\par     .Urine = 0
\par     .Misc = 0
\par     .Sweat = 0
\par     
\par     If DaysPreg > 190 Then
\par       .Fetal = 0.33
\par     Else
\par       .Fetal = 0
\par     End If
\par     
\par     
\par     Select Case DaysInMilk
\par       Case 0
\par         .Milk = 0
\par       Case Else
\par         .Milk = 0.15 * MilkProd
\par     End Select
\par     
\par     .Growth = 0.45 * (WG / 0.96)
\par               
\par   End With
\par   
\par   
\par   
\par ' Chlorine
\par 
\par   With Mineral(4)
\par     .Name = "Cl"
\par     .Units = "(g/d)"
\par     
\par     .Fecal = 2.25 * (BW / 100)
\par     
\par     .Urine = 0
\par     .Misc = 0
\par     .Sweat = 0
\par     
\par     If DaysPreg > 190 Then
\par       .Fetal = 1
\par     Else
\par       .Fetal = 0
\par     End If
\par     
\par     
\par     .Milk = 1.15 * MilkProd
\par     
\par     .Growth = 1 * (WG / 0.96)
\par     
\par             
\par   End With
\par     
\par 
\par 
\par ' Potassium
\par 
\par   With Mineral(5)
\par     .Name = "K"
\par     .Units = "(g/d)"
\par     
\par     If AnimalType = "Lactating Cow" Then
\par       .Fecal = 6.1 * TotalDMFed
\par     Else
\par       .Fecal = 2.6 * TotalDMFed
\par     End If
\par     
\par     
\par     .Urine = 0.038 * BW                     ' urine loss
\par 
\par     
\par     Select Case Temp
\par       Case Is < 25
\par         .Sweat = 0
\par       Case 25 To 30
\par         .Sweat = 0.04 * (BW / 100)
\par       Case Else
\par         .Sweat = 0.4 * (BW / 100)
\par     End Select
\par     
\par     .Misc = 0
\par    
\par     
\par     If DaysPreg > 190 Then
\par       .Fetal = 1.027
\par     Else
\par       .Fetal = 0
\par     End If
\par     
\par     
\par     .Milk = 1.5 * MilkProd
\par     
\par     .Growth = 1.6 * (WG / 0.96)
\par         
\par               
\par   End With
\par   
\par   
\par   
\par ' Sodium
\par 
\par   With Mineral(6)
\par     .Name = "Na"
\par     .Units = "(g/d)"
\par     
\par     If AnimalType = "Lactating Cow" Then
\par       .Fecal = 0.038 * BW
\par     Else
\par       .Fecal = 0.015 * BW
\par     End If
\par       
\par     
\par     .Urine = 0
\par     .Misc = 0
\par     
\par     Select Case Temp
\par       Case Is < 25
\par         .Sweat = 0
\par       Case 25 To 30
\par         .Sweat = 0.1 * (BW / 100)
\par       Case Else
\par         .Sweat = 0.5 * (BW / 100)
\par     End Select
\par     
\par     
\par     If DaysPreg > 190 Then
\par       .Fetal = 1.39
\par     Else
\par       .Fetal = 0
\par     End If
\par     
\par     .Milk = 0.63 * MilkProd
\par     
\par     .Growth = 1.4 * (WG / 0.96)
\par     
\par     
\par   End With
\par   
\par   
\par   
\par ' Sulfur
\par 
\par   With Mineral(7)
\par     .Name = "S"
\par     .Units = "(g/d)"
\par     
\par     ' Non-factorial approach used
\par     .Fecal = 0
\par     .Misc = 0
\par     .Urine = 0
\par     .Sweat = 0
\par     .Fetal = 0
\par     .Milk = 0
\par     .Growth = 0
\par     
\par   End With
\par   
\par   
\par   
\par ' Cobalt
\par 
\par   With Mineral(8)
\par     
\par     .Name = "Co"
\par     .Units = "(mg/d)"
\par     
\par     ' Factorial approach not used here
\par     .Fecal = 0
\par     .Misc = 0
\par     .Urine = 0
\par     .Sweat = 0
\par     .Fetal = 0
\par     .Milk = 0
\par     .Growth = 0
\par     
\par   End With
\par   
\par   
\par   
\par ' Copper
\par 
\par   With Mineral(9)
\par     .Name = "Cu"
\par     .Units = "(mg/d)"
\par     
\par     .Fecal = 0.0071 * BW
\par     .Urine = 0
\par     .Sweat = 0
\par     .Misc = 0
\par     
\par     
\par     Select Case DaysPreg
\par       Case 0
\par         .Fetal = 0
\par       Case Is < 100
\par         .Fetal = 0.5
\par       Case 100 To 225
\par         .Fetal = 1.5
\par       Case Else
\par         .Fetal = 2
\par     End Select
\par     
\par     
\par     
\par     Select Case DaysInMilk
\par       Case 0
\par         .Milk = 0
\par       Case Else
\par         .Milk = 0.15 * MilkProd
\par     End Select
\par     
\par     .Growth = 1.15 * (WG / 0.96)
\par         
\par   End With
\par   
\par   
\par   
\par ' Iodine
\par 
\par   With Mineral(10)
\par     .Name = "I"
\par     .Units = "(mg/d)"
\par     
\par     .Fecal = 0
\par     .Urine = 0
\par     .Sweat = 0
\par     .Fetal = 0
\par     
\par     If DaysInMilk > 0 Then
\par       .Milk = 1.5 * (BW / 100)
\par       .Misc = 0
\par     Else
\par       .Milk = 0
\par       .Misc = 0.6 * (BW / 100)
\par     End If
\par     
\par     
\par     .Growth = 0
\par     
\par   End With
\par   
\par   
\par   
\par ' Iron
\par 
\par   With Mineral(11)
\par     .Name = "Fe"
\par     .Units = "(mg/d)"
\par     
\par     .Fecal = 0
\par     .Urine = 0
\par     .Sweat = 0
\par     .Misc = 0
\par     
\par     If DaysPreg > 190 Then
\par       .Fetal = 18
\par     Else
\par       .Fetal = 0
\par     End If
\par     
\par     .Milk = 1 * MilkProd
\par     
\par     .Growth = 34 * (WG / 0.96)  ' Requirement is on a full, not shrunk, basis
\par         
\par   End With
\par   
\par   
\par   
\par ' Manganese
\par 
\par   With Mineral(12)
\par     
\par     .Name = "Mn"
\par     .Units = "(mg/d)"
\par     
\par     .Fecal = 0.002 * BW
\par     .Urine = 0
\par     .Sweat = 0
\par     .Misc = 0
\par     
\par     If DaysPreg > 190 Then
\par       .Fetal = 0.3
\par     Else
\par       .Fetal = 0
\par     End If
\par     
\par     Select Case DaysInMilk
\par       Case 0
\par         .Milk = 0
\par       Case Else
\par         .Milk = 0.03 * MilkProd
\par     End Select
\par     
\par     .Growth = 0.7 * (WG / 0.96)
\par         
\par   End With
\par   
\par   
\par   
\par ' Selenium
\par 
\par   With Mineral(13)
\par     .Name = "Se"
\par     .Units = "(mg/d)"
\par     
\par     ' Factorial approach not used here
\par     .Fecal = 0
\par     .Misc = 0
\par     .Urine = 0
\par     .Sweat = 0
\par     .Fetal = 0
\par     .Milk = 0
\par     .Growth = 0
\par 
\par     
\par   End With
\par   
\par   
\par ' Zinc
\par 
\par   With Mineral(14)
\par     .Name = "Zn"
\par     .Units = "(mg/d)"
\par     
\par     .Fecal = 0.033 * BW
\par     .Urine = 0.012 * BW
\par     .Sweat = 0
\par     .Misc = 0
\par     
\par     If DaysPreg > 190 Then
\par       .Fetal = 12
\par     Else
\par       .Fetal = 0
\par     End If
\par     
\par     .Milk = 4 * MilkProd
\par     .Growth = 24 * (WG / 0.96)  ' Requirement is on a full, not shrunk, basis
\par         
\par   End With
\par   
\par   
\par   
\par ' Vitamin A
\par 
\par   With Mineral(16)
\par     .Name = "Vit A"
\par     .Units = "(1000 IU/kg)"
\par     
\par     ' Factorial approach not used here
\par     .Fecal = 0
\par     .Urine = 0
\par     .Sweat = 0
\par     .Misc = 0
\par     .Fetal = 0
\par     .Milk = 0
\par     .Growth = 0
\par     
\par   End With
\par   
\par   
\par ' Vitamin D
\par 
\par   With Mineral(17)
\par     .Name = "Vit D"
\par     .Units = "(1000 IU/kg)"
\par     
\par     ' Factorial approach not used here
\par     .Fecal = 0
\par     .Urine = 0
\par     .Sweat = 0
\par     .Misc = 0
\par     .Fetal = 0
\par     .Milk = 0
\par     .Growth = 0
\par     
\par   End With
\par   
\par   
\par ' Vitamin E
\par 
\par   With Mineral(18)
\par     .Name = "Vit E"
\par     .Units = "(IU/kg)"
\par     
\par     ' Factorial approach not used here
\par     .Fecal = 0
\par     .Urine = 0
\par     .Sweat = 0
\par     .Misc = 0
\par     .Fetal = 0
\par     .Milk = 0
\par     .Growth = 0
\par     
\par   End With
\par 
\par 
\par ' Calves don't have a factorial mineral requirements system
\par If AnimalType = "Young Calf" Then
\par   For C = 1 To 18
\par     With Mineral(C)
\par       .Fecal = 0
\par       .Urine = 0
\par       .Sweat = 0
\par       .Misc = 0
\par       .Fetal = 0
\par       .Milk = 0
\par       .Growth = 0
\par     End With
\par   Next C
\par End If
\par 
\par 
\par If AnimalType = "Young Calf" Then
\par   MilkFeeds = 0
\par   CalfStarter = 0
\par   RegFeeds = 0
\par 
\par   For X = 1 To NumFeeds
\par     If Feed(X).Name = "Calf Starter" Then
\par       CalfStarter = CalfStarter + Feed(X).DMFed
\par     ElseIf (InStr(Feed(X).Category, "Calf Feed") > 0) Then
\par       MilkFeeds = MilkFeeds + Feed(X).DMFed
\par     Else
\par       RegFeeds = RegFeeds + Feed(X).DMFed
\par     End If
\par   Next X
\par End If
\par 
\par   
\par   
\par For C = 1 To 18
\par 
\par   With Mineral(C)
\par     
\par     .Maint = .Fecal + .Urine + .Sweat + .Misc
\par     
\par   
\par     If AnimalType <> "Young Calf" Then
\par     
\par       If ((Age < (FirstCalf + CalfInt)) Or (LactNum <= 1)) Then
\par         ' Keep the already computed growth requirement
\par       Else
\par         ' Set the growth requirement to zero
\par         .Growth = 0
\par       End If
\par   
\par       
\par       If C < VitA Then
\par         .Total = (.Maint + .Fetal + .Milk + .Growth)
\par       Else
\par         Select Case C
\par           Case 16
\par             If (AnimalType = "Replacement Heifer") Then
\par               If DaysPreg > 259 Then
\par                 .Total = 0.11 * BW
\par               Else
\par                 .Total = 0.08 * BW
\par               End If
\par             Else
\par               .Total = 0.11 * BW
\par             End If
\par           Case 17
\par             .Total = 0.03 * BW
\par           Case 18
\par             If Grazing = True Then
\par               If AnimalType = "Dry Cow" Then
\par                 .Total = 0.5 * BW
\par               Else
\par                 .Total = 0.26 * BW
\par               End If
\par             Else
\par               If AnimalType = "Dry Cow" Then
\par                 .Total = 1.6 * BW
\par               ElseIf AnimalType = "Young Calf" Then
\par                 .Total = 50 * TotalDMFed
\par               Else
\par                 .Total = 0.8 * BW
\par               End If
\par             End If
\par         End Select
\par       End If
\par     
\par     
\par       If .Name = "Co" Then
\par         .Total = 0.11 * TotalDMFed
\par       End If
\par     
\par       If .Name = "S" Then
\par         .Total = 2 * TotalDMFed
\par       End If
\par     
\par       If .Name = "Se" Then
\par         .Total = 0.3 * TotalDMFed
\par       End If
\par           
\par       
\par   
\par     Else
\par   
\par       If StarterDMI = 0 Then
\par     
\par         Select Case .Name
\par           Case "Ca"
\par             .Total = 10 * TotalDMFed
\par           Case "P"
\par             .Total = (7.5 * TotalDMFed) / 0.9
\par           Case "Mg"
\par             .Total = 0.7 * TotalDMFed
\par           Case "Na"
\par             .Total = 1 * TotalDMFed
\par           Case "K"
\par             .Total = 6.5 * TotalDMFed
\par           Case "Cl"
\par             .Total = 2 * TotalDMFed
\par           Case "S"
\par             .Total = 2.9 * TotalDMFed
\par           Case "Fe"
\par             .Total = 100 * TotalDMFed
\par           Case "Mn"
\par             .Total = 40 * TotalDMFed
\par           Case "Zn"
\par             .Total = 40 * TotalDMFed
\par           Case "Cu"
\par             .Total = 10 * TotalDMFed
\par           Case "I"
\par             .Total = 0.25 * TotalDMFed
\par           Case "Co"
\par             .Total = 0.1 * TotalDMFed
\par           Case "Se"
\par             .Total = 0.3 * TotalDMFed
\par           Case "Vit A"
\par             .Total = 0.11 * CalfBW
\par           Case "Vit D"
\par             .Total = 0.6 * TotalDMFed
\par           Case "Vit E"
\par             .Total = 50 * TotalDMFed
\par         End Select
\par      
\par       Else
\par 
\par         Select Case .Name
\par           Case "Ca"
\par             .Total = 7 * TotalDMFed
\par           Case "P"
\par             .Total = (4.5 * TotalDMFed) / 0.78
\par           Case "Mg"
\par             .Total = 1 * TotalDMFed
\par           Case "Na"
\par             .Total = 1.5 * TotalDMFed
\par           Case "K"
\par             .Total = 6.5 * TotalDMFed
\par           Case "Cl"
\par             .Total = 2 * TotalDMFed
\par           Case "S"
\par             .Total = 2 * TotalDMFed
\par           Case "Fe"
\par             .Total = 50 * TotalDMFed
\par           Case "Mn"
\par             .Total = 40 * TotalDMFed
\par           Case "Zn"
\par             .Total = 40 * TotalDMFed
\par           Case "Cu"
\par             .Total = 10 * TotalDMFed
\par           Case "I"
\par             .Total = 0.25 * TotalDMFed
\par           Case "Co"
\par             .Total = 0.1 * TotalDMFed
\par           Case "Se"
\par             .Total = 0.3 * TotalDMFed
\par           Case "Vit A"
\par             .Total = 0.11 * CalfBW
\par           Case "Vit D"
\par             .Total = 0.6 * TotalDMFed
\par           Case "Vit E"
\par             .Total = 50 * TotalDMFed
\par         End Select
\par       
\par       End If
\par      
\par     End If
\par   
\par   
\par   
\par   .Supplied = 0
\par   .Absorbable = 0
\par 
\par   If NumFeeds > 0 Then
\par         
\par     For d = 1 To NumFeeds
\par       
\par       Select Case .Name
\par         Case "Ca"
\par           .Supplied = .Supplied + ((Feed(d).Ca / 100) * Feed(d).DMFed)
\par           
\par           If AnimalType <> "Young Calf" Then
\par             .Absorbable = .Absorbable + (((Feed(d).Ca / 100) * Feed(d).DMFed) * (Feed(d).CaBio))
\par           Else
\par             .Absorbable = .Absorbable + ((Feed(d).Ca / 100) * Feed(d).DMFed)
\par           End If
\par           
\par         Case "Mg"
\par           .Supplied = .Supplied + ((Feed(d).Mg / 100) * Feed(d).DMFed)
\par           
\par           If AnimalType <> "Young Calf" Then
\par             .Absorbable = .Absorbable + (((Feed(d).Mg / 100) * Feed(d).DMFed) * (Feed(d).MgBio))
\par           Else
\par             .Absorbable = .Absorbable + ((Feed(d).Mg / 100) * Feed(d).DMFed)
\par           End If
\par                   
\par         Case "P"
\par           .Supplied = .Supplied + ((Feed(d).P / 100) * Feed(d).DMFed)
\par           
\par           If AnimalType <> "Young Calf" Then
\par             .Absorbable = .Absorbable + (((Feed(d).P / 100) * Feed(d).DMFed) * (Feed(d).PBio))
\par           Else
\par             .Absorbable = .Absorbable + ((Feed(d).P / 100) * Feed(d).DMFed)
\par           End If
\par           
\par         Case "K"
\par           .Supplied = .Supplied + ((Feed(d).K / 100) * Feed(d).DMFed)
\par           
\par           If AnimalType <> "Young Calf" Then
\par             .Absorbable = .Absorbable + (((Feed(d).K / 100) * Feed(d).DMFed) * (Feed(d).KBio))
\par           Else
\par             .Absorbable = .Absorbable + ((Feed(d).K / 100) * Feed(d).DMFed)
\par           End If
\par         
\par         Case "Na"
\par           .Supplied = .Supplied + ((Feed(d).Na / 100) * Feed(d).DMFed)
\par           
\par           If AnimalType <> "Young Calf" Then
\par             .Absorbable = .Absorbable + (((Feed(d).Na / 100) * Feed(d).DMFed) * (Feed(d).NaBio))
\par           Else
\par             .Absorbable = .Absorbable + ((Feed(d).Na / 100) * Feed(d).DMFed)
\par           End If
\par         
\par         Case "Cl"
\par           .Supplied = .Supplied + ((Feed(d).Cl / 100) * Feed(d).DMFed)
\par           
\par           If AnimalType <> "Young Calf" Then
\par             .Absorbable = .Absorbable + (((Feed(d).Cl / 100) * Feed(d).DMFed) * (Feed(d).ClBio))
\par           Else
\par             .Absorbable = .Absorbable + ((Feed(d).Cl / 100) * Feed(d).DMFed)
\par           End If
\par           
\par         Case "Zn"
\par           .Supplied = .Supplied + (Feed(d).Zn * Feed(d).DMFed)
\par           
\par           If AnimalType <> "Young Calf" Then
\par             .Absorbable = .Absorbable + ((Feed(d).Zn * Feed(d).DMFed) * (Feed(d).ZnBio))
\par           Else
\par             .Absorbable = .Absorbable + (Feed(d).Zn * Feed(d).DMFed)
\par           End If
\par                         
\par         Case "Cu"
\par           .Supplied = .Supplied + (Feed(d).Cu * Feed(d).DMFed)
\par           
\par           If AnimalType <> "Young Calf" Then
\par             .Absorbable = .Absorbable + ((Feed(d).Cu * Feed(d).DMFed) * (Feed(d).CuBio))
\par           Else
\par             .Absorbable = .Absorbable + (Feed(d).Cu * Feed(d).DMFed)
\par           End If
\par         
\par         Case "Co"
\par           .Supplied = .Supplied + (Feed(d).Co * Feed(d).DMFed)
\par           
\par           If AnimalType <> "Young Calf" Then
\par             .Absorbable = .Absorbable + ((Feed(d).Co * Feed(d).DMFed) * (Feed(d).CoBio))
\par           Else
\par             .Absorbable = .Absorbable + (Feed(d).Co * Feed(d).DMFed)
\par           End If
\par                         
\par         Case "Mn"
\par           .Supplied = .Supplied + (Feed(d).Mn * Feed(d).DMFed)
\par           
\par           If AnimalType <> "Young Calf" Then
\par             .Absorbable = .Absorbable + ((Feed(d).Mn * Feed(d).DMFed) * (Feed(d).MnBio))
\par           Else
\par             .Absorbable = .Absorbable + (Feed(d).Mn * Feed(d).DMFed)
\par           End If
\par                         
\par         Case "I"
\par           .Supplied = .Supplied + (Feed(d).I * Feed(d).DMFed)
\par           
\par           If AnimalType <> "Young Calf" Then
\par             .Absorbable = .Absorbable + ((Feed(d).I * Feed(d).DMFed) * (Feed(d).IBio))
\par           Else
\par             .Absorbable = .Absorbable + (Feed(d).I * Feed(d).DMFed)
\par           End If
\par                         
\par         Case "Fe"
\par           .Supplied = .Supplied + (Feed(d).Fe * Feed(d).DMFed)
\par           
\par           If AnimalType <> "Young Calf" Then
\par             .Absorbable = .Absorbable + ((Feed(d).Fe * Feed(d).DMFed) * (Feed(d).FeBio))
\par           Else
\par             .Absorbable = .Absorbable + (Feed(d).Fe * Feed(d).DMFed)
\par           End If
\par                         
\par         Case "S"
\par           .Supplied = .Supplied + ((Feed(d).s / 100) * Feed(d).DMFed)
\par           
\par           If AnimalType <> "Young Calf" Then
\par             .Absorbable = .Absorbable + (((Feed(d).s / 100) * Feed(d).DMFed) * (Feed(d).SBio))
\par           Else
\par             .Absorbable = .Absorbable + ((Feed(d).s / 100) * Feed(d).DMFed)
\par           End If
\par           
\par         Case "Se"
\par           .Supplied = .Supplied + (Feed(d).Se * Feed(d).DMFed)
\par           
\par           If AnimalType <> "Young Calf" Then
\par             .Absorbable = .Absorbable + ((Feed(d).Se * Feed(d).DMFed) * (Feed(d).SeBio))
\par           Else
\par             .Absorbable = .Absorbable + (Feed(d).Se * Feed(d).DMFed)
\par           End If
\par          
\par         Case "Vit A"
\par           .Supplied = .Supplied + (Feed(d).VitA * Feed(d).DMFed)
\par           .Absorbable = .Absorbable + (Feed(d).VitA * Feed(d).DMFed)
\par           
\par         Case "Vit D"
\par           .Supplied = .Supplied + (Feed(d).VitD * Feed(d).DMFed)
\par           .Absorbable = .Absorbable + (Feed(d).VitD * Feed(d).DMFed)
\par             
\par         Case "Vit E"
\par           .Supplied = .Supplied + (Feed(d).VitE * Feed(d).DMFed)
\par           .Absorbable = .Absorbable + (Feed(d).VitE * Feed(d).DMFed)
\par             
\par       End Select
\par       
\par     Next d
\par       
\par   End If
\par   
\par   
\par   'Ration Density Calculation
\par   If TotalDMFed > 0 Then
\par     Select Case .Name
\par       Case "Co", "Cu", "I", "Fe", "Mn", "Se", "Zn"
\par         .RD = .Supplied / TotalDMFed
\par       Case "Vit A", "Vit D", "Vit E"
\par         .RD = .Supplied / TotalDMFed
\par       Case Else
\par         .RD = .Supplied / TotalDMFed
\par     End Select
\par   Else
\par     .RD = 0
\par   End If
\par   
\par   
\par   
\par   ' Balance Calculation - First the .Supplied variable must be converted to
\par   ' the same units as the .Total
\par   
\par   Select Case .Units
\par     Case "(g/d)"
\par       .Supplied = .Supplied * 1000
\par       .Absorbable = .Absorbable * 1000
\par     Case "(mg/d)"
\par       Select Case .Name
\par         Case "Co", "Cu", "I", "Fe", "Mn", "Se", "Zn"
\par           ' These minerals are listed as mg/kg, no need to convert them to mg units
\par         Case Else
\par           .Supplied = .Supplied * 1000000
\par           .Absorbable = .Absorbable * 1000000
\par       End Select
\par   End Select
\par   
\par   .Balance = .Absorbable - .Total
\par   
\par   
\par   
\par   ' Used to calculate Ration Density requirements for young calves
\par   If AnimalType = "Young Calf" Then
\par     Select Case .Name
\par       Case "Ca"
\par         m = 1
\par         n = 0.7
\par         o = 0.6
\par       Case "P"
\par         m = 0.7
\par         n = 0.45
\par         o = 0.4
\par       Case "Mg"
\par         m = 0.07
\par         n = 0.1
\par         o = 0.1
\par       Case "Na"
\par         m = 0.4
\par         n = 0.15
\par         o = 0.14
\par       Case "K"
\par         m = 0.65
\par         n = 0.65
\par         o = 0.65
\par       Case "Cl"
\par         m = 0.25
\par         n = 0.2
\par         o = 0.2
\par       Case "S"
\par         m = 0.29
\par         n = 0.2
\par         o = 0.2
\par       Case "Fe"
\par         m = 100
\par         n = 50
\par         o = 50
\par       Case "Mn", "Zn"
\par         m = 40
\par         n = 40
\par         o = 40
\par       Case "Cu"
\par         m = 10
\par         n = 10
\par         o = 10
\par       Case "I"
\par         m = 0.5
\par         n = 0.25
\par         o = 0.25
\par       Case "Co"
\par         m = 0.11
\par         n = 0.1
\par         o = 0.1
\par       Case "Se"
\par         m = 0.3
\par         n = 0.3
\par         o = 0.3
\par       Case "Vit A"
\par         m = 9
\par         n = 4
\par         o = 4
\par       Case "Vit D"
\par         m = 0.6
\par         n = 0.6
\par         o = 0.6
\par       Case "Vit E"
\par         m = 50
\par         n = 25
\par         o = 25
\par     End Select
\par     
\par     If TotalDMFed > 0 Then
\par       .RDReq = ((MilkFeeds * m) + (CalfStarter * n) + (RegFeeds * o)) / TotalDMFed
\par     Else
\par       .RDReq = 0
\par     End If
\par     
\par   End If
\par   
\par   
\par  
\par   End With
\par 
\par Next C
\par 
\par End Sub
\par 
\par 
\par 
\par 
\par Private Sub DietEvalOneComputations()
\par 
\par Dim X As Integer
\par 
\par ' The EvalFactors are calculated here as follows :
\par '
\par ' NE Diet, NE Required, NE Differ, MP Diet, MP Required, MP Differ
\par ' Mcal/d     Mcal/d      Mcal/d      g/d         g/d        g/d
\par  
\par If AnimalType <> "Replacement Heifer" Then
\par   EvalFactor(1).Name = "NE Supplied"
\par   EvalFactor(2).Name = "NE Required"
\par   EvalFactor(3).Name = "NE (Diet - Req.)"
\par   EvalFactor(4).Name = "MP Diet"
\par   EvalFactor(5).Name = "MP Required"
\par   EvalFactor(6).Name = "MP (Diet - Req.)"
\par Else
\par   EvalFactor(1).Name = "ME Supplied"
\par   EvalFactor(2).Name = "ME Required"
\par   EvalFactor(3).Name = "ME (Diet - Req.)"
\par   EvalFactor(4).Name = "MP Diet"
\par   EvalFactor(5).Name = "MP Required"
\par   EvalFactor(6).Name = "MP (Diet - Req.)"
\par End If
\par  
\par  
\par For X = 1 To 6
\par   If X < 4 Then
\par     EvalFactor(X).Units = "Mcal/day"
\par   Else
\par     EvalFactor(X).Units = "g/day"
\par   End If
\par Next X
\par  
\par  
\par If AnimalType <> "Replacement Heifer" Then
\par   EvalFactor(1).Total = NEl_Total
\par Else
\par   EvalFactor(1).Total = MEng_Total
\par End If
\par  
\par EvalFactor(1).Maint = EvalFactor(1).Total
\par  
\par If AnimalType <> "Replacement Heifer" Then
\par   EvalFactor(2).Maint = NEMaint
\par Else
\par   If NEmOverMEng > 0 Then
\par     EvalFactor(2).Maint = NEMaint / NEmOverMEng
\par   Else
\par     EvalFactor(2).Maint = 0
\par   End If
\par End If
\par 
\par EvalFactor(3).Maint = EvalFactor(1).Maint - EvalFactor(2).Maint
\par  
\par EvalFactor(1).Preg = EvalFactor(3).Maint
\par  
\par If AnimalType <> "Replacement Heifer" Then
\par   EvalFactor(2).Preg = NEPreg
\par Else
\par   EvalFactor(2).Preg = MEPreg
\par End If
\par 
\par EvalFactor(3).Preg = EvalFactor(1).Preg - EvalFactor(2).Preg
\par  
\par EvalFactor(1).Lact = EvalFactor(3).Preg
\par  
\par If AnimalType <> "Replacement Heifer" Then
\par   EvalFactor(2).Lact = NELact
\par Else
\par   EvalFactor(2).Lact = 0
\par End If
\par 
\par  
\par EvalFactor(3).Lact = EvalFactor(1).Lact - EvalFactor(2).Lact
\par  
\par  
\par EvalFactor(1).Gain = EvalFactor(3).Lact
\par  
\par  
\par If AnimalType = "Replacement Heifer" Then
\par   EvalFactor(2).Gain = EvalFactor(1).Gain
\par Else
\par   If EQEBG > 0 Then
\par     EvalFactor(2).Gain = NEGrowth
\par   Else
\par     EvalFactor(2).Gain = 0
\par   End If
\par End If
\par 
\par EvalFactor(3).Gain = EvalFactor(1).Gain - EvalFactor(2).Gain
\par  
\par EvalFactor(1).Reserves = EvalFactor(3).Gain
\par 
\par EvalFactor(2).Reserves = NEReserves
\par 
\par  
\par With EvalFactor(2)
\par     .Total = .Maint + .Preg + .Lact + .Gain + .Reserves
\par End With
\par 
\par EvalFactor(3).Total = EvalFactor(1).Total - EvalFactor(2).Total
\par 
\par 
\par MPBact = MCP_Total * 0.64
\par 
\par MPFeed = TotalDigestedRUP
\par 
\par 
\par EvalFactor(4).Total = MPBact + MPFeed
\par 
\par EvalFactor(4).Maint = EvalFactor(4).Total
\par 
\par EvalFactor(5).Maint = MPMaint
\par 
\par EvalFactor(6).Maint = EvalFactor(4).Maint - EvalFactor(5).Maint
\par 
\par EvalFactor(4).Preg = EvalFactor(6).Maint
\par 
\par EvalFactor(5).Preg = MPPreg
\par 
\par EvalFactor(6).Preg = EvalFactor(4).Preg - EvalFactor(5).Preg
\par 
\par EvalFactor(4).Lact = EvalFactor(6).Preg
\par 
\par EvalFactor(5).Lact = MPLact
\par 
\par EvalFactor(6).Lact = EvalFactor(4).Lact - EvalFactor(5).Lact
\par 
\par EvalFactor(4).Gain = EvalFactor(6).Lact
\par 
\par 
\par If Age > FirstCalf Then
\par   If EQEBG > 0 Then
\par     EvalFactor(5).Gain = MPGrowth
\par   Else
\par     EvalFactor(5).Gain = 0
\par   End If
\par Else
\par   If SWG > 0 Then
\par     If EffMP_NPg > 0 Then
\par       If WG > 0 Then
\par         EvalFactor(5).Gain = (((268 - (29.4 * (RE / WG))) * WG) / EffMP_NPg)
\par       Else
\par         EvalFactor(5).Gain = 0
\par       End If
\par     Else
\par       EvalFactor(5).Gain = 0
\par     End If
\par   Else
\par     EvalFactor(5).Gain = 0
\par   End If
\par End If
\par 
\par 
\par EvalFactor(6).Gain = EvalFactor(4).Gain - EvalFactor(5).Gain
\par 
\par EvalFactor(4).Reserves = EvalFactor(6).Gain
\par 
\par With EvalFactor(5)
\par   .Total = .Maint + .Preg + .Lact + .Gain
\par End With
\par 
\par EvalFactor(6).Total = EvalFactor(4).Total - EvalFactor(5).Total
\par 
\par DMIPred = DryMatterIntake
\par 
\par DMIActual = TotalDMFed
\par 
\par If TotalDMFed > 0 Then
\par   DietCP = CP_Total / (TotalDMFed * 1000)
\par Else
\par   DietCP = 0
\par End If
\par 
\par 
\par If CP_Total > 0 Then
\par   CP_RDP = (RDP_Total * 1000) / CP_Total
\par   CP_RUP = (CP_Total - (RDP_Total * 1000)) / CP_Total
\par Else
\par   CP_RDP = 0
\par   CP_RUP = 0
\par End If
\par 
\par 
\par RDPReq = 0.15294 * TDN_Act_Total
\par 
\par RDPSup = TotalDMFed * 1000 * DietCP * CP_RDP
\par 
\par RDPBal = RDPSup - RDPReq
\par 
\par RUPSup = CP_Total - RDPSup
\par 
\par 
\par If DietRUPDigest > 0 Then
\par   RUPReq = (EvalFactor(5).Total - (MPBact + MPEndo)) / DietRUPDigest
\par Else
\par   RUPReq = 0
\par End If
\par 
\par RUPBal = RUPSup - RUPReq
\par 
\par 
\par 
\par MPBalance = (((MPFeed * 1000) + MPBact + MPEndo) _
\par                 - (MPMaint + MPPreg + MPLact + MPGrowth))
\par 
\par 
\par If SWG > 0 Then
\par   ProteinInGain = (268 - (29.4 * (NEGrowthDiet / SWG)))
\par Else
\par   ProteinInGain = 0
\par End If
\par 
\par 
\par 
\par Dim MPBalwoGrowth As Single
\par 
\par MPBalwoGrowth = (((MPFeed * 1000) + MPBact + MPEndo) _
\par                         - (MPMaint + MPPreg + MPLact))
\par 
\par If ProteinInGain > 0 Then
\par   MPAllowGain = ((MPBalwoGrowth * EffMP_NPg) / ProteinInGain) / 0.96
\par Else
\par   MPAllowGain = 0
\par End If
\par 
\par 
\par MPAllowGainPreg = MPAllowGain + (ADGPreg / 1000)
\par 
\par 
\par 
\par 
\par End Sub
\par 
\par 
\par 
\par 
\par Private Sub ReservesComputations()
\par 
\par Dim EnergyBal As Single                 ' Equal to EvalFactor(3).Gain
\par Dim X As Integer
\par 
\par EnergyBal = EvalFactor(3).Gain
\par 
\par CS_F(1) = 0.726
\par CS_F(2) = 0.794
\par CS_F(3) = 0.863
\par CS_F(4) = 0.931
\par CS_F(5) = 1
\par CS_F(6) = 1.069
\par CS_F(7) = 1.137
\par CS_F(8) = 1.206
\par CS_F(9) = 1.274
\par 
\par 
\par CS5EBW = (SBW * 0.851) / CS_F(CS9)
\par 
\par For X = 1 To 9
\par   EBW(X) = CS_F(X) * CS5EBW
\par   AF(X) = 0.037683 * X
\par   TF(X) = AF(X) * EBW(X)
\par   AP(X) = 0.200886 - (0.0066762 * X)
\par   TP(X) = AP(X) * EBW(X)
\par   ER(X) = (9.4 * TF(X)) + (5.55 * TP(X))
\par Next X
\par 
\par If CS9 >= 3 Then
\par   Lose1CS = ER(CS9) - ER(CS9 - 2)
\par Else
\par   Lose1CS = 1000000
\par End If
\par 
\par If CS9 <= 7 Then
\par   Gain1CS = ER(CS9 + 2) - ER(CS9)
\par Else
\par   Gain1CS = 1000000
\par End If
\par 
\par If CS9 >= 3 Then
\par   NElSub = 0.82 * Lose1CS
\par Else
\par   NElSub = 0.82 * (ER(CS9) - ER(1))
\par End If
\par   
\par If CS9 <= 7 Then
\par   NElReq = (0.644 / 0.75) * Gain1CS
\par Else
\par   NElReq = (0.644 / 0.75) * (ER(9) - ER(CS9))
\par End If
\par 
\par If EnergyBal > 0 Then
\par   deltaER = NElReq
\par Else
\par   deltaER = NElSub
\par End If
\par 
\par If AnimalType = "Replacement Heifer" Then
\par   DaysToChange = 0
\par Else
\par   DaysToChange = deltaER / EnergyBal
\par End If
\par 
\par End Sub
\par 
\par 
\par 
\par Private Sub DietEvalTwoComputations()
\par 
\par Dim X As Integer
\par 
\par If AnimalType = "Replacement Heifer" Then
\par   CondMessage = "No changes in condition score for heifers."
\par Else
\par   If EvalFactor(3).Total >= 0 Then
\par     If Abs(DaysToChange) <= 305 Then
\par       CondMessage = "Days to gain one condition score :  " & Str(CInt(Abs(DaysToChange)))
\par     Else
\par       CondMessage = "Days to gain one condition score :  > 305"
\par     End If
\par   Else
\par     If Abs(DaysToChange) <= 305 Then
\par       CondMessage = "Days to lose one condition score :  " & Str(CInt(Abs(DaysToChange)))
\par     Else
\par       CondMessage = "Days to lose one condition score :  > 305"
\par     End If
\par   End If
\par End If
\par 
\par 
\par If TotalDMFed > 0 Then
\par   DietNDF = NDF_Total / TotalDMFed
\par   DietADF = ADF_Total / TotalDMFed
\par Else
\par   DietNDF = 0
\par   DietADF = 0
\par End If
\par 
\par 
\par ForageNDF = 0
\par 
\par For X = 1 To NumFeeds
\par   If Feed(X).EnergyEqClass = "Forage" Then
\par     ForageNDF = ForageNDF + ((Feed(X).NDF / 100) * Feed(X).DMFed)
\par   End If
\par Next X
\par 
\par 
\par If TotalDMFed > 0 Then
\par   DietME = MEng_Total / TotalDMFed
\par   DietNEl = NEl_Total / TotalDMFed
\par   DietNEg = NEg_Total / TotalDMFed
\par Else
\par   DietME = 0
\par   DietNEl = 0
\par   DietNEg = 0
\par End If
\par 
\par 
\par Const kgPerMetricTon = 996.9
\par 
\par 
\par If AnimalType = "Lactating Cow" Then
\par   DailyMilk = MilkProd
\par Else
\par   DailyMilk = 0
\par End If
\par 
\par 
\par Dim NEBalance As Single
\par Dim MEBalance As Single
\par Dim EnergyFactor As Single
\par Dim NE_per_kg As Single
\par 
\par 
\par If AnimalType <> "Replacement Heifer" Then
\par   NEBalance = (NEl_Total - (NEMaint + NEPreg + NELact + NEGrowth))
\par   MEBalance = 0
\par Else
\par   NEBalance = 0
\par   MEBalance = (MEng_Total - (MEMaint + MEPreg + MEGrowth))
\par End If
\par 
\par 
\par 
\par If AnimalType = "Lactating Cow" Then
\par   If NEBalance < 0 Then
\par     Reserves_WG = NEBalance / 4.92
\par   Else
\par     Reserves_WG = NEBalance / 5.12
\par   End If
\par ElseIf AnimalType = "Dry Cow" Then
\par   If NEBalance < 0 Then
\par     Reserves_WG = NEBalance / 4.92
\par   Else
\par     Reserves_WG = NEBalance / 6.4
\par   End If
\par Else
\par   Reserves_WG = 0
\par End If
\par 
\par 
\par If NEBalance > 0 Then
\par   MPReqReserves = (Reserves_WG * ProteinInGain) / 0.492
\par   MPProvReserves = 0
\par   
\par   If DietRUPDigest > 0 Then
\par     RUPReqReserves = MPReqReserves / DietRUPDigest
\par   Else
\par     RUPReqReserves = 0
\par   End If
\par   
\par   RUPProvReserves = 0
\par Else
\par   MPReqReserves = 0
\par   MPProvReserves = (-1 * Reserves_WG) * ProteinInGain * 0.67
\par   RUPReqReserves = 0
\par   
\par   If DietRUPDigest > 0 Then
\par     RUPProvReserves = MPProvReserves / DietRUPDigest
\par   Else
\par     RUPProvReserves = 0
\par   End If
\par End If
\par 
\par 
\par TargetADGwoPreg = ADG
\par TargetADGPreg = ADG + (ADGPreg / 1000)
\par 
\par 
\par If MilkProd > 0 Then
\par   If (NEl_Total - NEMaint - NEPreg) > 0 Then
\par     If NELact > 0 Then
\par       EnergyAllowableMilk = MilkProd * ((NEl_Total - NEMaint - NEPreg - NEGrowth) / NELact)
\par     Else
\par       EnergyAllowableMilk = 0
\par     End If
\par   Else
\par     EnergyAllowableMilk = 0
\par   End If
\par   
\par   If (((MPFeed * 1000) + MPBact + MPEndo) - MPMaint - MPPreg) > 0 Then
\par     If MPLact > 0 Then
\par       ProteinAllowableMilk = MilkProd * ((((MPFeed * 1000) + MPBact + MPEndo) - MPMaint - MPPreg - MPGrowth) / MPLact)
\par     Else
\par       ProteinAllowableMilk = 0
\par     End If
\par   Else
\par     ProteinAllowableMilk = 0
\par   End If
\par Else
\par   EnergyAllowableMilk = 0
\par   ProteinAllowableMilk = 0
\par End If
\par 
\par 
\par 
\par If DryMatterIntake > 0 Then
\par   If ((AnimalType <> "Replacement Heifer") Or (DaysPreg > 259)) Then
\par     Energy_TargetDietConc = (NEMaint + NEPreg + NELact + NEGrowth) / DryMatterIntake
\par   Else
\par     Energy_TargetDietConc = (MEMaint + MEPreg + MEGrowth) / DryMatterIntake
\par   End If
\par   
\par   MP_TargetDietConc = (MPMaint + MPPreg + MPLact + MPGrowth) / DryMatterIntake
\par 
\par   Ca_TargetDietConc = Mineral(1).Total / DryMatterIntake
\par 
\par   P_TargetDietConc = Mineral(2).Total / DryMatterIntake
\par Else
\par   Energy_TargetDietConc = 0
\par   MP_TargetDietConc = 0
\par   Ca_TargetDietConc = 0
\par   P_TargetDietConc = 0
\par End If
\par 
\par 
\par DCAD = (((Mineral(6).RD * 100) * 435) + ((Mineral(5).RD * 100) * 256)) _
\par           - (((Mineral(4).RD * 100) * 282) + ((Mineral(7).RD * 100) * 624))
\par 
\par 
\par 
\par End Sub
\par 
\par 
\par 
\par Public Sub CalfComputations()
\par 
\par Dim X As Integer
\par 
\par Dim TotalNEm As Single
\par Dim TotalNEg As Single
\par Dim TotalME As Single
\par Dim TotalCP As Single
\par Dim TotalDCP As Single
\par Dim TotalMilkADP As Single
\par Dim TotalStarterADP As Single
\par Dim TotalMilkCP As Single
\par Dim TotalStarterCP As Single
\par Dim TotalADP As Single
\par Dim ADP_to_CP As Single
\par Dim MilkME As Single
\par Dim StarterME As Single
\par Dim Fat As Single
\par 
\par 
\par ' Energy computations
\par MilkDMI = 0
\par StarterDMI = 0
\par TotalNEm = 0
\par TotalNEg = 0
\par TotalME = 0
\par TotalCP = 0
\par TotalDCP = 0
\par 
\par TotalMilkADP = 0
\par TotalStarterADP = 0
\par TotalMilkCP = 0
\par TotalStarterCP = 0
\par DietNEmCalf = 0
\par DietNEgCalf = 0
\par DietMECalf = 0
\par 
\par MilkME = 0
\par StarterME = 0
\par Fat = 0
\par 
\par 
\par ' If there are no feeds then there can be no ration, so the computations cannot be run
\par If NumFeeds = 0 Then
\par   Exit Sub
\par End If
\par 
\par 
\par ' If the Calf is not fed anything, then the computations cannot be run
\par ' NB: Both regular and calf feeds have a .DMFed property, so this is okay as-is
\par TotalDMFed = 0
\par 
\par For X = 1 To NumFeeds
\par   TotalDMFed = TotalDMFed + Feed(X).DMFed
\par Next X
\par 
\par 
\par If TotalDMFed = 0 Then
\par   Exit Sub
\par End If
\par 
\par 
\par 
\par Call ComputeEnergyValues
\par 
\par 
\par 
\par For X = 1 To NumFeeds
\par   With Feed(X)
\par     If (.Category = "Calf Feed - Starter") _
\par             Or (.Category = "Calf Feed - Milk") _
\par               Or (.Category = "Calf Feed - Vitamin/Mineral") Then
\par       ' The feed is a calf feed
\par       
\par       TotalNEm = TotalNEm + (.DMFed * .cNEm)
\par       TotalNEg = TotalNEg + (.DMFed * .cNEg)
\par       TotalME = TotalME + (.DMFed * .cMEng)
\par       TotalCP = TotalCP + (.DMFed * (.cCP / 100))
\par       TotalDCP = TotalDCP + (.DMFed * (.cDCP / 100))
\par       Fat = Fat + (.DMFed * (.cEE / 100))
\par       
\par       If .Category = "Calf Feed - Milk" Then
\par         MilkDMI = MilkDMI + .DMFed
\par         MilkME = MilkME + (.DMFed * .cMEng)
\par         TotalMilkADP = TotalMilkADP + (.DMFed * (.cDCP / 100))
\par         TotalMilkCP = TotalMilkCP + (.DMFed * (.cCP / 100))
\par       Else
\par         StarterDMI = StarterDMI + .DMFed
\par         StarterME = StarterME + (.DMFed * .cMEng)
\par         TotalStarterADP = TotalStarterADP + (.DMFed * (.cDCP / 100))
\par         TotalStarterCP = TotalStarterCP + (.DMFed * (.cCP / 100))
\par       End If
\par     
\par     Else
\par       ' The feed is a regular feed.
\par       ' All regular feeds in a calf diet are considered starter feeds
\par       StarterDMI = StarterDMI + .DMFed
\par       
\par       ' Convert regular feed CP values to calf feed CP values
\par       .cCP = .CP
\par       
\par       ' Since regular feeds are automatically starter feeds in a calf
\par       ' diet, the DCP must be 0.75 * CP
\par       .cDCP = 0.75 * .cCP
\par       
\par       ' Once CP and DCP are determined for these regular feeds,
\par       ' Total values are computed the same way
\par       TotalCP = TotalCP + (.DMFed * (.cCP / 100))
\par       TotalDCP = TotalDCP + (.DMFed * (.cDCP / 100))
\par       TotalStarterADP = TotalStarterADP + (.DMFed * (.cDCP / 100))
\par       TotalStarterCP = TotalStarterCP + (.DMFed * (.cCP / 100))
\par     End If
\par   End With
\par Next X
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par ' These values are only used for output, so define them
\par ' on a percentage basis (eg 83% instead of 0.83)
\par If TotalDMFed > 0 Then
\par   DietCPCalf = (TotalCP / TotalDMFed) * 100
\par   DietDCPCalf = (TotalDCP / TotalDMFed) * 100
\par Else
\par   DietCPCalf = 0
\par   DietDCPCalf = 0
\par End If
\par 
\par 
\par ' ME requirement for maintenance with no stress
\par NEmCalf = 0.086 * (CalfBW ^ 0.75)
\par 
\par 
\par 
\par ' These instruction are used to compute a weighted average of
\par ' efficiencies to convert NEm to ME and NEg to ME
\par Dim NonMineralFeeds As Single
\par 
\par CalfKm = 0
\par CalfKg = 0
\par NonMineralFeeds = 0
\par NEg_Total = 0
\par NEm_Total = 0
\par 
\par 
\par 
\par For X = 1 To NumFeeds
\par   With Feed(X)
\par     If (.Category = "Calf Feed - Starter") _
\par             Or (.Category = "Calf Feed - Milk") _
\par               Or (.Category = "Calf Feed - Vitamin/Mineral") Then
\par       If .cMEng <> 0 Then
\par         CalfKm = CalfKm + (0.86 * (Feed(X).DMFed * Feed(X).cMEng))
\par         CalfKg = CalfKg + (0.69 * (Feed(X).DMFed * Feed(X).cMEng))
\par         NonMineralFeeds = NonMineralFeeds + (Feed(X).DMFed * Feed(X).cMEng)
\par       End If
\par     Else
\par       If .MEng <> 0 Then
\par         CalfKm = CalfKm + (0.75 * (Feed(X).DMFed * Feed(X).MEng))
\par         CalfKg = CalfKg + (0.57 * (Feed(X).DMFed * Feed(X).MEng))
\par         
\par         .NEm = (0.75 * (Feed(X).DMFed * Feed(X).MEng))
\par         .NEg = (0.57 * (Feed(X).DMFed * Feed(X).MEng))
\par         
\par         NonMineralFeeds = NonMineralFeeds + (Feed(X).DMFed * Feed(X).MEng)
\par         
\par         NEg_Total = NEg_Total + .NEg
\par         NEm_Total = NEm_Total + .NEm
\par       End If
\par     End If
\par   End With
\par Next X
\par 
\par If NonMineralFeeds > 0 Then
\par   CalfKm = CalfKm / NonMineralFeeds
\par   CalfKg = CalfKg / NonMineralFeeds
\par Else
\par   CalfKm = 0
\par   CalfKg = 0
\par End If
\par 
\par 
\par 
\par 
\par 
\par ' Note that energy values for regular feeds are computed based on the total diet.
\par ' That is, in the ComputeEnergyValues sub-model, NEm, NEg and ME values
\par ' are computed for the entire ration, not on a feed-by-feed basis.
\par ' These total energy values are added to those computed for the calf feeds.
\par TotalNEm = TotalNEm + NEm_Total
\par TotalNEg = TotalNEg + NEg_Total
\par TotalME = TotalME + MEng_Total
\par 
\par 
\par 
\par ' Note that, to get the dietary energy concentrations, the TotalDMFed
\par ' value is used.  This is correct, because the total energy values
\par ' used in these equations are Calf + Regular feed totals
\par If TotalDMFed > 0 Then
\par   DietNEmCalf = TotalNEm / TotalDMFed
\par   DietNEgCalf = TotalNEg / TotalDMFed
\par   DietMECalf = TotalME / TotalDMFed
\par Else
\par   DietNEmCalf = 0
\par   DietNEgCalf = 0
\par   DietMECalf = 0
\par End If
\par 
\par 
\par ' Factor in lower critical temperature stress
\par If Age > 2 Then
\par 
\par   Select Case CalfTemp
\par     Case Is > 5
\par       TempFactor = 0
\par     Case Is > 0
\par       TempFactor = 0.13
\par     Case Is > -5
\par       TempFactor = 0.27
\par     Case Is > -10
\par       TempFactor = 0.4
\par     Case Is > -15
\par       TempFactor = 0.54
\par     Case Is > -20
\par       TempFactor = 0.68
\par     Case Is > -25
\par       TempFactor = 0.81
\par     Case Is > -30
\par       TempFactor = 0.94
\par     Case Else
\par       TempFactor = 1.07
\par   End Select
\par 
\par Else
\par 
\par   Select Case CalfTemp
\par     Case Is > 15
\par       TempFactor = 0
\par     Case Is > 10
\par       TempFactor = 0.13
\par     Case Is > 5
\par       TempFactor = 0.27
\par     Case Is > 0
\par       TempFactor = 0.4
\par     Case Is > -5
\par       TempFactor = 0.54
\par     Case Is > -10
\par       TempFactor = 0.68
\par     Case Is > -15
\par       TempFactor = 0.86
\par     Case Is > -20
\par       TempFactor = 0.94
\par     Case Is > -25
\par       TempFactor = 1.08
\par     Case Is > -30
\par       TempFactor = 1.21
\par     Case Else
\par       TempFactor = 1.34
\par   End Select
\par 
\par End If
\par 
\par 
\par 
\par ' Apply temperature factor to compute NEm requirement (with stress)
\par NEmCalf = (NEmCalf * (1 + TempFactor))
\par 
\par 
\par 
\par ' Recalculate ME for maintenance, since the NEm has been adjusted for temperature effects
\par If CalfKm <> 0 Then
\par   MEMaint = NEmCalf / CalfKm
\par Else
\par   MEMaint = 0
\par End If
\par 
\par 
\par If DietNEmCalf <> 0 Then
\par   DMIForNEmCalf = NEmCalf / DietNEmCalf
\par Else
\par   DMIForNEmCalf = 0
\par End If
\par 
\par 
\par DMIForGrowth = (TotalDMFed - DMIForNEmCalf)
\par 
\par NEFGCalf = DMIForGrowth * DietNEgCalf
\par 
\par 
\par If CalfKg <> 0 Then
\par   MEFGCalf = NEFGCalf / CalfKg
\par Else
\par   MEFGCalf = 0
\par End If
\par 
\par 
\par 
\par If NEFGCalf > 0 Then
\par 
\par   ' The energy allowable ADG equation was derived from the following equation:
\par   '
\par   ' NEgReq = 0.69 * (0.84 * CalfBW ^.355) * (LWG ^ 1.2)
\par   '
\par   '
\par   ' I can re-write the equation in terms of LWG as follows:
\par   '
\par   ' (LWG ^ 1.2) = NEgReq / (0.69 * (0.84 * CalfBW ^ .355))
\par   ' (LWG ^ 1.2) = (1.45 * NEgReq) / (0.84 * CalfBW ^ .355)
\par   '
\par   '
\par   ' Now take the log of both sides of the equation to get:
\par   ' log ((LWG ^ 1.2)) = log((1.45 * NEgReq) / (0.84 * CalfBW ^ .355))
\par   ' log ((LWG ^ 1.2)) = log((1.73 * NEgReq) / (CalfBW ^ .355))
\par   '
\par   '
\par   ' Since log A^x = x * (log A), the equation can now be re-written as:
\par   '
\par   ' 1.2 * (log LWG) = log((1.73 * NEgReq) / (CalfBW ^ .355))
\par   ' log LWG = 0.8333 * (log((1.73 * NEgReq) / (CalfBW ^ .355)))
\par   '
\par   '
\par   ' Finally, by using the fact that exp(log(A)) = A, we can re-write the original
\par   ' equation as follows:
\par   '
\par   ' LWG = exp(0.8333 * (log((1.73 * NEgReq) / (CalfBW ^ .355))))
\par   
\par   EnergyADGCalf = Exp((0.8333 * (Log((1.19 * NEFGCalf) / (0.69 * (CalfBW ^ 0.355))))))
\par Else
\par   EnergyADGCalf = -9999
\par End If
\par 
\par 
\par If EnergyADGCalf > 0 Then
\par   CalfADG = EnergyADGCalf
\par Else
\par   CalfADG = 0
\par End If
\par 
\par 
\par ' There is 30 g Nitrogen/kg gain ==> (30 g N)(6.25) = 187.5 g Net Protein/kg gain
\par ProteinReqCalf = CalfADG * 0.188
\par 
\par 
\par 
\par ' Protein Supply
\par TotalADP = ((TotalMilkCP * 0.93) + (TotalStarterCP * 0.75)) * 1000
\par 
\par 
\par If (TotalMilkCP + TotalStarterCP) > 0 Then
\par   ADP_to_CP = TotalADP / ((TotalMilkCP + TotalStarterCP) * 1000)
\par Else
\par   ADP_to_CP = 1
\par End If
\par 
\par 
\par ' Protein maintenance requirements
\par EUN = 0.2 * (CalfBW ^ 0.75)
\par MFN = (MilkDMI * 1.9) + (StarterDMI * 3.3)
\par 
\par If TotalCP > 0 Then
\par   BV = (0.8 * (TotalMilkCP / TotalCP)) _
\par               + (0.7 * (TotalStarterCP / TotalCP))
\par Else
\par   BV = 1
\par End If
\par 
\par 
\par If BV <= 0 Then
\par   BV = 1
\par End If
\par 
\par ADPmaint = 6.25 * (((1 / BV) * (EUN + MFN)) - MFN)
\par 
\par 
\par If ADP_to_CP > 0 Then
\par   CPmCalf = ADPmaint / ADP_to_CP
\par Else
\par   CPmCalf = 0
\par End If
\par 
\par ADPgrowth = (ProteinReqCalf * 1000) / BV
\par 
\par If ADP_to_CP > 0 Then
\par   CPgCalf = ADPgrowth / ADP_to_CP
\par Else
\par   CPgCalf = 0
\par End If
\par 
\par 
\par CalfADPBal = TotalADP - ADPmaint - ADPgrowth
\par CalfCPBal = (TotalCP * 1000) - CPmCalf - CPgCalf
\par 
\par ADPAllowGain = ((TotalADP - ADPmaint) * BV) / 0.188
\par 
\par 
\par CalfFat = Fat + ((Fat_Total / 100) * TotalRegDMFed)
\par 
\par If TotalDMFed > 0 Then
\par   DietFatCalf = CalfFat / TotalDMFed
\par Else
\par   DietFatCalf = 0
\par End If
\par 
\par 
\par End Sub
\par 
\par 
\par 
\par Private Sub GrowthComputations()
\par 
\par If MW > 0 Then
\par   SRW_to_MSBW = 478 / (0.96 * MW)
\par Else
\par   SRW_to_MSBW = 478 / (0.96 * (MW_From_Breed(Breed)))
\par End If
\par 
\par EQSBW = (SBW - CW) * SRW_to_MSBW
\par 
\par SWG = 13.91 * (NEGrowthDiet ^ 0.9116) * (EQSBW ^ -0.6837)
\par 
\par 
\par MEAllowGain = (SWG / 0.96)
\par 
\par 
\par If Age < FirstCalf Then
\par   MEAllowGainPreg = MEAllowGain + (ADGPreg / 1000)
\par Else
\par   MEAllowGainPreg = (EQEBG / 0.956) + (ADGPreg / 1000)
\par End If
\par 
\par 
\par If UseTargetADG = False Then
\par   WG = 0.96 * (DesiredADG / 1000)
\par   DLWReq = 0
\par Else
\par   WG = 0.96 * ADG
\par   DLWReq = 0
\par End If
\par   
\par 
\par 
\par 
\par EQEBW = 0.891 * EQSBW
\par 
\par EQEBG = 0.956 * WG
\par 
\par RE = 0.0635 * (EQEBW ^ 0.75) * (EQEBG ^ 1.097)
\par 
\par If NEg_Total > 0 Then
\par   If AnimalType <> "Replacement Heifer" Then
\par     NEGrowth = (NEm_Total / NEg_Total) * RE
\par   Else
\par     NEGrowth = RE
\par   End If
\par Else
\par   NEGrowth = 0
\par End If
\par 
\par If WG = 0 Then
\par   NPg = 0
\par Else
\par   NPg = WG * (268 - (29.4 * (RE / WG)))
\par End If
\par 
\par 
\par 
\par If (EQSBW <= 478) Then
\par   EffMP_NPg = (83.4 - (0.114 * EQSBW)) / 100
\par Else
\par   EffMP_NPg = 0.28908
\par End If
\par 
\par 
\par MPGrowth = NPg / EffMP_NPg
\par 
\par 
\par If (DLWReq > 0) Then
\par   NEReserves = DLWReq * 5.12
\par Else
\par   NEReserves = DLWReq * 4.92
\par End If
\par 
\par 
\par If AnimalType = "Replacement Heifer" Then
\par   DMIAvailGrowth = TotalDMFed - DMIMaint - DMIPreg
\par Else
\par   DMIAvailGrowth = TotalDMFed - DMIMaint - DMIPreg - DMILact
\par End If
\par 
\par 
\par 
\par 
\par ' This value is used only for Replacement Heifers
\par If NEgOverMEng > 0 Then
\par   MEGrowth = NEGrowth / NEgOverMEng
\par Else
\par   MEGrowth = 0
\par End If
\par 
\par 
\par End Sub
\par 
\par 
\par Private Sub MaintenanceComputations()
\par 
\par If (AnimalType = "Lactating Cow") Or (AnimalType = "Dry Cow") Then
\par   a1 = 0.08
\par Else
\par   a1 = 0.086
\par End If
\par 
\par CS9 = ((CS - 1) * 2) + 1
\par 
\par If AnimalType = "Replacement Heifer" Then
\par   COMP = 0.8 + ((CS9 - 1) * 0.05)
\par   a2 = 0.0007 * (20 - PrevTemp)
\par Else
\par   COMP = 1
\par   a2 = 0
\par End If
\par 
\par 
\par 
\par If Grazing = False Then
\par   NEmact = 0
\par Else
\par   If AnimalType = "Replacement Heifer" Then
\par     NEmact = ((0.0009 * BW) + (0.0016 * BW))
\par     
\par     If Topography = "Hilly" Then
\par       NEmact = NEmact + (0.006 * BW)
\par     End If
\par     
\par   Else
\par   
\par     ' These activity equations derived by NRC committee members on
\par     ' a full (not shrunk) body weight basis
\par     NEmact = ((((Distance / 1000) * Trips) * (0.00045 * BW)) + (0.0012 * BW))
\par     
\par     If Topography = "Hilly" Then
\par       NEmact = NEmact + (0.006 * BW)
\par     End If
\par 
\par   End If
\par End If
\par 
\par 
\par 
\par If AnimalType = "Replacement Heifer" Then
\par   NEMaintNS = (((SBW - CW) ^ 0.75) * ((a1 * COMP) + a2)) + NEmact
\par Else
\par   NEMaintNS = (((BW - CW) ^ 0.75) * (a1 * COMP)) + NEmact
\par End If
\par 
\par 
\par If TotalDMFed > 0 Then
\par   If AnimalType <> "Replacement Heifer" Then
\par     NEDietConc = NEl_Total / TotalDMFed
\par   Else
\par     NEDietConc = NEm_Total / TotalDMFed
\par   End If
\par Else
\par   NEDietConc = 0
\par End If
\par 
\par 
\par If NEDietConc > 0 Then
\par   FeedMaint = NEMaintNS / NEDietConc
\par Else
\par   FeedMaint = 0
\par End If
\par 
\par 
\par If TotalDMFed > 0 Then
\par   NEGrowthDietNS = (TotalDMFed - FeedMaint) * (NEg_Total / TotalDMFed)
\par Else
\par   NEGrowthDietNS = 0
\par End If
\par 
\par 
\par If AnimalType = "Replacement Heifer" Then
\par   NEFP = NEGrowthDietNS
\par Else
\par   If TotalDMFed > 0 Then
\par     NEFP = (TotalDMFed - FeedMaint) * (NEl_Total / TotalDMFed) * 0.65
\par   Else
\par     NEFP = 0
\par   End If
\par End If
\par 
\par 
\par MEI = MEng_Total
\par 
\par SA = 0.09 * (SBW ^ 0.67)
\par 
\par If SA > 0 Then
\par   HP = (MEI - NEFP) / SA
\par Else
\par   HP = 0
\par End If
\par 
\par 
\par T = Age * 30.4
\par 
\par Select Case T
\par   Case Is <= 30
\par     TI = 2.5
\par   Case Is < 183
\par     TI = 6.5
\par   Case Is < 363
\par     TI = 5.1875 + (0.3125 * CS9)
\par   Case Is >= 363
\par     TI = 5.25 + (0.75 * CS9)
\par End Select
\par 
\par 
\par Select Case CoatCond
\par   Case "Clean/Dry"
\par     Coat = 1
\par   Case "Some Mud"
\par     Coat = 0.8
\par   Case "Wet/Matted"
\par     Coat = 0.5
\par   Case "Covered with Snow/Mud"
\par     Coat = 0.2
\par End Select
\par 
\par 
\par EI = ((7.36 - (0.296 * WindSpeed) + (2.55 * HairDepth)) * Coat) * 0.8
\par 
\par If (EI < 0) Then
\par   EI = 0
\par End If
\par 
\par INS = TI + EI
\par 
\par LCT = 39 - (INS * HP * 0.85)
\par 
\par If (LCT > Temp) Then
\par   MEcs = SA * (LCT - Temp) / INS
\par Else
\par   MEcs = 0
\par End If
\par 
\par If ((MEng_Total > 0) And (TotalDMFed > 0)) Then
\par   ColdStr = ((NEDietConc / (MEng_Total / TotalDMFed)) * MEcs)
\par Else
\par   ColdStr = 0
\par End If
\par 
\par 
\par If ((HeatStress = "None") Or (Temp < 30)) Then
\par   HeatStr = 1
\par ElseIf (HeatStress = "Rapid/Shallow") Then
\par   HeatStr = 1.07
\par ElseIf (HeatStress = "Open Mouth") Then
\par   HeatStr = 1.18
\par End If
\par 
\par 
\par NEMaint = ((NEMaintNS + ColdStr) * HeatStr) + NEmact
\par 
\par 
\par If NEDietConc > 0 Then
\par   DMIMaint = NEMaint / NEDietConc
\par Else
\par   DMIMaint = 0
\par End If
\par 
\par 
\par If DaysPreg > 0 Then
\par   If ((MEng_Total > 0) And (TotalDMFed > 0)) Then
\par     DMIPreg = MEPreg / (MEng_Total / TotalDMFed)
\par   Else
\par     DMIPreg = 0
\par   End If
\par Else
\par   DMIPreg = 0
\par End If
\par 
\par 
\par If TotalDMFed > 0 Then
\par   NEGrowthDiet = (TotalDMFed - DMIMaint - DMIPreg) * (NEg_Total / TotalDMFed)
\par Else
\par   NEGrowthDiet = 0
\par End If
\par 
\par 
\par 
\par ' Net energy for growth available in the diet cannot be negative
\par If NEGrowthDiet < 0 Then
\par   NEGrowthDiet = 0
\par End If
\par 
\par 
\par 
\par MPMaint = (0.3 * ((BW - CW) ^ 0.6)) + (4.1 * ((BW - CW) ^ 0.5)) _
\par                     + ((TotalDMFed * 1000 * 0.03) - (0.5 * ((MPBact / 0.8) - (MPBact)))) + MPEndoReq
\par 
\par 
\par ScurfMP = 0.3 * ((BW - CW) ^ 0.6)
\par UrineMP = 4.1 * ((BW - CW) ^ 0.5)
\par FecalMP = ((TotalDMFed * 1000 * 0.03) - (0.5 * ((MPBact / 0.8) - (MPBact))))
\par 
\par 
\par 
\par ' Used only for Replacement Heifers
\par If NEmOverMEng > 0 Then
\par   MEMaint = NEMaint / NEmOverMEng
\par Else
\par   MEMaint = 0
\par End If
\par 
\par End Sub
\par 
\par 
\par Private Sub DryMatterIntakeComputations()
\par 
\par Dim WOL As Single           ' Week of Lactation = 7 * Days In Milk
\par Dim Lag As Single           ' week of lactation correction -
\par                             ' used in Default and Roseler equations
\par 
\par Select Case CoatCond
\par   Case "Clean/Dry"
\par     CCFact = 1
\par   Case "Some Mud"
\par     CCFact = 1
\par   Case "Wet/Matted"
\par     CCFact = 0.85
\par   Case "Covered with Snow/Mud"
\par     CCFact = 0.7
\par End Select
\par 
\par CCFact = 1
\par 
\par 
\par Select Case Temp
\par    Case Is < -15
\par     TempFact = 1.16
\par   Case Is < -5
\par     TempFact = 1.07
\par   Case Is < 5
\par     TempFact = 1.05
\par   Case Is < 15
\par     TempFact = 1.03
\par   Case Is < 25
\par     TempFact = 1
\par   Case Is < 35
\par     TempFact = 0.9
\par   Case Is > 35
\par     If (NightCooling = False) Then
\par       TempFact = 0.65
\par     Else
\par       TempFact = 0.9
\par     End If
\par End Select
\par 
\par 
\par If Age > 12 Then
\par   SubFact = 0.0869
\par Else
\par   SubFact = 0.1128
\par End If
\par 
\par 
\par 
\par ' These equations really belong in the Maintenance computations section,
\par ' but are put here since the DivFact variable requires the NEDietConc
\par If TotalDMFed > 0 Then
\par   If AnimalType <> "Replacement Heifer" Then
\par     NEDietConc = NEl_Total / TotalDMFed
\par   Else
\par     NEDietConc = NEm_Total / TotalDMFed
\par   End If
\par Else
\par   NEDietConc = 0
\par End If
\par 
\par 
\par If (NEDietConc < 1) Then
\par   DivFact = 0.95
\par Else
\par   DivFact = NEDietConc
\par End If
\par 
\par 
\par If DaysPreg < 259 Then
\par   If DivFact > 0 Then
\par     DMI_RH = ((BW ^ 0.75) * (((0.2435 * NEDietConc) - (0.0466 _
\par           * (NEDietConc ^ 2)) - SubFact) / DivFact)) _
\par              * TempFact * CCFact
\par   Else
\par     DMI_RH = 0
\par   End If
\par Else
\par   DMI_RH = ((1.71 - (0.69 * Exp(0.35 * (DaysPreg - 280)))) / 100) * BW
\par End If
\par 
\par 
\par Dim DMIRH_Factor As Single
\par 
\par 
\par If ((DaysPreg > 210) And (DaysPreg < 259)) Then
\par   DMIRH_Factor = (1 + ((210 - DaysPreg) * 0.0025))
\par Else
\par   DMIRH_Factor = 1
\par End If
\par 
\par DMI_RH = DMI_RH * DMIRH_Factor
\par 
\par 
\par 
\par WOL = DaysInMilk / 7
\par Lag = 1 - (Exp(-1 * 0.192 * (WOL + 3.67)))
\par DMILact = (((BW ^ 0.75) * 0.0968) + (0.372 * FCM) - 0.293) * Lag
\par 
\par 
\par DMIDry = ((1.97 - (0.75 * Exp(0.16 * (DaysPreg - 280)))) / 100) * BW
\par 
\par 
\par 
\par Select Case AnimalType
\par   Case "Lactating Cow"
\par     DryMatterIntake = DMILact
\par   Case "Dry Cow"
\par     DryMatterIntake = DMIDry
\par   Case "Replacement Heifer"
\par     DryMatterIntake = DMI_RH
\par   Case "Young Calf"
\par     DryMatterIntake = DMI_RH
\par End Select
\par 
\par 
\par If DryMatterIntake <= TotalDMFed Then
\par   Pasture = 0
\par Else
\par   If DryMatterIntake > 0 Then
\par     Pasture = (DryMatterIntake - TotalDMFed) / DryMatterIntake
\par   Else
\par     Pasture = 0
\par   End If
\par End If
\par 
\par 
\par End Sub
\par 
\par 
\par 
\par Private Sub AminoAcidComputations()
\par 
\par Dim DMFed As Single
\par Dim NF As Integer
\par Dim X As Integer
\par 
\par 
\par 
\par If NumFeeds > 0 Then
\par   NF = NumFeeds
\par Else
\par   Exit Sub
\par End If
\par 
\par 
\par 
\par Dim TArg As Single
\par Dim THis As Single
\par Dim TIle As Single
\par Dim TLeu As Single
\par Dim TLys As Single
\par Dim TMet As Single
\par Dim TPhe As Single
\par Dim TThr As Single
\par Dim TTrp As Single
\par Dim TVal As Single
\par 
\par Dim Dig_TArg As Single
\par Dim Dig_THis As Single
\par Dim Dig_TIle As Single
\par Dim Dig_TLeu As Single
\par Dim Dig_TLys As Single
\par Dim Dig_TMet As Single
\par Dim Dig_TPhe As Single
\par Dim Dig_TThr As Single
\par Dim Dig_TTrp As Single
\par Dim Dig_TVal As Single
\par 
\par 
\par TArg = 0
\par THis = 0
\par TIle = 0
\par TLeu = 0
\par TLys = 0
\par TMet = 0
\par TPhe = 0
\par TThr = 0
\par TTrp = 0
\par TVal = 0
\par 
\par Dig_TArg = 0
\par Dig_THis = 0
\par Dig_TIle = 0
\par Dig_TLeu = 0
\par Dig_TLys = 0
\par Dig_TMet = 0
\par Dig_TPhe = 0
\par Dig_TThr = 0
\par Dig_TTrp = 0
\par Dig_TVal = 0
\par 
\par 
\par For X = 1 To NF
\par   
\par   With Feed(X)
\par   
\par     DMFed = .DMFed
\par     
\par     If ((DMFed > 0) And (.CP > 0) And (CP(X) > 0)) Then
\par     
\par       TArg = TArg + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (.Arg / 100) * TotalDMFed) * 1000)
\par     
\par       THis = THis + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (.His / 100) * TotalDMFed) * 1000)
\par     
\par       TIle = TIle + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (.Ile / 100) * TotalDMFed) * 1000)
\par     
\par       TLeu = TLeu + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (.Leu / 100) * TotalDMFed) * 1000)
\par     
\par       TLys = TLys + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (.Lys / 100) * TotalDMFed) * 1000)
\par     
\par       TMet = TMet + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (.Met / 100) * TotalDMFed) * 1000)
\par     
\par       TPhe = TPhe + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (.Phe / 100) * TotalDMFed) * 1000)
\par      
\par       TThr = TThr + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (.Thr / 100) * TotalDMFed) * 1000)
\par     
\par       TTrp = TTrp + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (.Trp / 100) * TotalDMFed) * 1000)
\par     
\par       TVal = TVal + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (.Val / 100) * TotalDMFed) * 1000)
\par       
\par       
\par       
\par       Dig_TArg = Dig_TArg + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                        * (Feed(X).RUPDigest / 100) * (.Arg / 100) * TotalDMFed) * 1000)
\par     
\par       Dig_THis = Dig_THis + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (Feed(X).RUPDigest / 100) * (.His / 100) * TotalDMFed) * 1000)
\par     
\par       Dig_TIle = Dig_TIle + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (Feed(X).RUPDigest / 100) * (.Ile / 100) * TotalDMFed) * 1000)
\par     
\par       Dig_TLeu = Dig_TLeu + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (Feed(X).RUPDigest / 100) * (.Leu / 100) * TotalDMFed) * 1000)
\par     
\par       Dig_TLys = Dig_TLys + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (Feed(X).RUPDigest / 100) * (.Lys / 100) * TotalDMFed) * 1000)
\par     
\par       Dig_TMet = Dig_TMet + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (Feed(X).RUPDigest / 100) * (.Met / 100) * TotalDMFed) * 1000)
\par     
\par       Dig_TPhe = Dig_TPhe + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (Feed(X).RUPDigest / 100) * (.Phe / 100) * TotalDMFed) * 1000)
\par      
\par       Dig_TThr = Dig_TThr + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (Feed(X).RUPDigest / 100) * (.Thr / 100) * TotalDMFed) * 1000)
\par     
\par       Dig_TTrp = Dig_TTrp + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (Feed(X).RUPDigest / 100) * (.Trp / 100) * TotalDMFed) * 1000)
\par     
\par       Dig_TVal = Dig_TVal + (((DMFed / TotalDMFed) * (.CP / 100) * ((RUP(X) * 1000) / CP(X)) _
\par                       * (Feed(X).RUPDigest / 100) * (.Val / 100) * TotalDMFed) * 1000)
\par 
\par   
\par     End If
\par   
\par   End With
\par 
\par Next X
\par 
\par 
\par Dim EAATotalBeforeMP As Single
\par Dim x1 As Single
\par Dim x2 As Single
\par Dim TotalArg As Single
\par Dim TotalHis As Single
\par Dim TotalIle As Single
\par Dim TotalLeu As Single
\par Dim TotalLys As Single
\par Dim TotalMet As Single
\par Dim TotalPhe As Single
\par Dim TotalThr As Single
\par Dim TotalVal As Single
\par 
\par 
\par EAATotalBeforeMP = (TArg + THis + TIle + TLeu _
\par                         + TLys + TMet + TPhe + TThr + TTrp + TVal)
\par                         
\par If ((RUP_Total * 1000) + EndCP + MCP_Total) > 0 Then
\par   x2 = ((RUP_Total * 1000) / ((RUP_Total * 1000) + EndCP + MCP_Total)) * 100
\par Else
\par   x2 = 0
\par End If
\par 
\par If EAATotalBeforeMP > 0 Then
\par   x1 = ((TArg / EAATotalBeforeMP) * 100)
\par Else
\par   x1 = 0
\par End If
\par 
\par TotalArg = 7.31 + (0.251 * x1)
\par 
\par 
\par If EAATotalBeforeMP > 0 Then
\par   x1 = ((THis / EAATotalBeforeMP) * 100)
\par Else
\par   x1 = 0
\par End If
\par 
\par TotalHis = 2.07 + (0.393 * x1) + (0.0122 * x2)
\par 
\par 
\par If EAATotalBeforeMP > 0 Then
\par   x1 = ((TIle / EAATotalBeforeMP) * 100)
\par Else
\par   x1 = 0
\par End If
\par 
\par TotalIle = 7.59 + (0.391 * x1) - (0.0123 * x2)
\par 
\par                         
\par If EAATotalBeforeMP > 0 Then
\par   x1 = ((TLeu / EAATotalBeforeMP) * 100)
\par Else
\par   x1 = 0
\par End If
\par 
\par TotalLeu = 8.53 + (0.41 * x1) + (0.0746 * x2)
\par 
\par                         
\par If EAATotalBeforeMP > 0 Then
\par   x1 = ((TLys / EAATotalBeforeMP) * 100)
\par Else
\par   x1 = 0
\par End If
\par 
\par TotalLys = 13.66 + (0.3276 * x1) - (0.07497 * x2)
\par 
\par                         
\par If EAATotalBeforeMP > 0 Then
\par   x1 = ((TMet / EAATotalBeforeMP) * 100)
\par Else
\par   x1 = 0
\par End If
\par 
\par TotalMet = 2.9 + (0.391 * x1) - (0.00742 * x2)
\par 
\par 
\par If EAATotalBeforeMP > 0 Then
\par   x1 = ((TPhe / EAATotalBeforeMP) * 100)
\par Else
\par   x1 = 0
\par End If
\par 
\par TotalPhe = 7.32 + (0.244 * x1) + (0.029 * x2)
\par 
\par 
\par If EAATotalBeforeMP > 0 Then
\par   x1 = ((TThr / EAATotalBeforeMP) * 100)
\par Else
\par   x1 = 0
\par End If
\par 
\par TotalThr = 7.55 + (0.45 * x1) - (0.0212 * x2)
\par 
\par 
\par If EAATotalBeforeMP > 0 Then
\par   x1 = ((TVal / EAATotalBeforeMP) * 100)
\par Else
\par   x1 = 0
\par End If
\par 
\par TotalVal = 8.68 + (0.314 * x1)
\par 
\par 
\par 
\par TotalEAA = 30.9 + (0.863 * EAATotalBeforeMP) + (0.433 * MCP_Total)
\par 
\par 
\par 
\par 
\par Dim TotalRUPArgFlow As Single
\par Dim TotalRUPHisFlow As Single
\par Dim TotalRUPIleFlow As Single
\par Dim TotalRUPLeuFlow As Single
\par Dim TotalRUPLysFlow As Single
\par Dim TotalRUPMetFlow As Single
\par Dim TotalRUPPheFlow As Single
\par Dim TotalRUPThrFlow As Single
\par Dim TotalRUPTrpFlow As Single
\par Dim TotalRUPValFlow As Single
\par 
\par 
\par TotalRUPArgFlow = 0.863 * TArg
\par TotalRUPHisFlow = 0.863 * THis
\par TotalRUPIleFlow = 0.863 * TIle
\par TotalRUPLeuFlow = 0.863 * TLeu
\par TotalRUPLysFlow = 0.863 * TLys
\par TotalRUPMetFlow = 0.863 * TMet
\par TotalRUPPheFlow = 0.863 * TPhe
\par TotalRUPThrFlow = 0.863 * TThr
\par TotalRUPTrpFlow = 0.863 * TTrp
\par TotalRUPValFlow = 0.863 * TVal
\par 
\par 
\par 
\par 
\par ' Duodenal Flow (g/d)
\par Arg_Flow = (TotalArg / 100) * TotalEAA
\par 
\par His_Flow = (TotalHis / 100) * TotalEAA
\par 
\par Ile_Flow = (TotalIle / 100) * TotalEAA
\par 
\par Leu_Flow = (TotalLeu / 100) * TotalEAA
\par 
\par Lys_Flow = (TotalLys / 100) * TotalEAA
\par 
\par Met_Flow = (TotalMet / 100) * TotalEAA
\par 
\par Phe_Flow = (TotalPhe / 100) * TotalEAA
\par 
\par Thr_Flow = (TotalThr / 100) * TotalEAA
\par 
\par Val_Flow = (TotalVal / 100) * TotalEAA
\par 
\par 
\par 
\par 
\par Dim TotalMCPEndArgFlow As Single
\par Dim TotalMCPEndHisFlow As Single
\par Dim TotalMCPEndIleFlow As Single
\par Dim TotalMCPEndLeuFlow As Single
\par Dim TotalMCPEndLysFlow As Single
\par Dim TotalMCPEndMetFlow As Single
\par Dim TotalMCPEndPheFlow As Single
\par Dim TotalMCPEndThrFlow As Single
\par Dim TotalMCPEndValFlow As Single
\par 
\par TotalMCPEndArgFlow = Arg_Flow - TotalRUPArgFlow
\par TotalMCPEndHisFlow = His_Flow - TotalRUPHisFlow
\par TotalMCPEndIleFlow = Ile_Flow - TotalRUPIleFlow
\par TotalMCPEndLeuFlow = Leu_Flow - TotalRUPLeuFlow
\par TotalMCPEndLysFlow = Lys_Flow - TotalRUPLysFlow
\par TotalMCPEndMetFlow = Met_Flow - TotalRUPMetFlow
\par TotalMCPEndPheFlow = Phe_Flow - TotalRUPPheFlow
\par TotalMCPEndThrFlow = Thr_Flow - TotalRUPThrFlow
\par TotalMCPEndValFlow = Val_Flow - TotalRUPValFlow
\par 
\par 
\par 
\par Dim dTotalRUPArg As Single
\par Dim dTotalRUPHis As Single
\par Dim dTotalRUPIle As Single
\par Dim dTotalRUPLeu As Single
\par Dim dTotalRUPLys As Single
\par Dim dTotalRUPMet As Single
\par Dim dTotalRUPPhe As Single
\par Dim dTotalRUPThr As Single
\par Dim dTotalRUPVal As Single
\par 
\par Dim dTotalMCPEndArg As Single
\par Dim dTotalMCPEndHis As Single
\par Dim dTotalMCPEndIle As Single
\par Dim dTotalMCPEndLeu As Single
\par Dim dTotalMCPEndLys As Single
\par Dim dTotalMCPEndMet As Single
\par Dim dTotalMCPEndPhe As Single
\par Dim dTotalMCPEndThr As Single
\par Dim dTotalMCPEndVal As Single
\par 
\par If TArg > 0 Then
\par   dTotalRUPArg = TotalRUPArgFlow * (Dig_TArg / TArg)
\par Else
\par   dTotalRUPArg = 0
\par End If
\par 
\par If THis > 0 Then
\par   dTotalRUPHis = TotalRUPHisFlow * (Dig_THis / THis)
\par Else
\par   dTotalRUPHis = 0
\par End If
\par 
\par If TIle > 0 Then
\par   dTotalRUPIle = TotalRUPIleFlow * (Dig_TIle / TIle)
\par Else
\par   dTotalRUPIle = 0
\par End If
\par 
\par If TLeu > 0 Then
\par   dTotalRUPLeu = TotalRUPLeuFlow * (Dig_TLeu / TLeu)
\par Else
\par   dTotalRUPLeu = 0
\par End If
\par 
\par If TLys > 0 Then
\par   dTotalRUPLys = TotalRUPLysFlow * (Dig_TLys / TLys)
\par Else
\par   dTotalRUPLys = 0
\par End If
\par 
\par If TMet > 0 Then
\par   dTotalRUPMet = TotalRUPMetFlow * (Dig_TMet / TMet)
\par Else
\par   dTotalRUPMet = 0
\par End If
\par 
\par If TPhe > 0 Then
\par   dTotalRUPPhe = TotalRUPPheFlow * (Dig_TPhe / TPhe)
\par Else
\par   dTotalRUPPhe = 0
\par End If
\par 
\par If TThr > 0 Then
\par   dTotalRUPThr = TotalRUPThrFlow * (Dig_TThr / TThr)
\par Else
\par   dTotalRUPThr = 0
\par End If
\par 
\par If TVal > 0 Then
\par   dTotalRUPVal = TotalRUPValFlow * (Dig_TVal / TVal)
\par Else
\par   dTotalRUPVal = 0
\par End If
\par 
\par 
\par dTotalMCPEndArg = 0.8 * TotalMCPEndArgFlow
\par dTotalMCPEndHis = 0.8 * TotalMCPEndHisFlow
\par dTotalMCPEndIle = 0.8 * TotalMCPEndIleFlow
\par dTotalMCPEndLeu = 0.8 * TotalMCPEndLeuFlow
\par dTotalMCPEndLys = 0.8 * TotalMCPEndLysFlow
\par dTotalMCPEndMet = 0.8 * TotalMCPEndMetFlow
\par dTotalMCPEndPhe = 0.8 * TotalMCPEndPheFlow
\par dTotalMCPEndThr = 0.8 * TotalMCPEndThrFlow
\par dTotalMCPEndVal = 0.8 * TotalMCPEndValFlow
\par 
\par 
\par Dig_Arg_Flow = dTotalRUPArg + dTotalMCPEndArg
\par Dig_His_Flow = dTotalRUPHis + dTotalMCPEndHis
\par Dig_Ile_Flow = dTotalRUPIle + dTotalMCPEndIle
\par Dig_Leu_Flow = dTotalRUPLeu + dTotalMCPEndLeu
\par Dig_Lys_Flow = dTotalRUPLys + dTotalMCPEndLys
\par Dig_Met_Flow = dTotalRUPMet + dTotalMCPEndMet
\par Dig_Phe_Flow = dTotalRUPPhe + dTotalMCPEndPhe
\par Dig_Thr_Flow = dTotalRUPThr + dTotalMCPEndThr
\par Dig_Val_Flow = dTotalRUPVal + dTotalMCPEndVal
\par 
\par 
\par MPBact = 0.64 * MCP_Total
\par MPFeed = TotalDigestedRUP
\par 
\par 
\par 
\par If (MPBact + (MPFeed * 1000) + MPEndo) > 0 Then
\par   ArgPctMP = 100 * (Dig_Arg_Flow / (MPBact + (MPFeed * 1000) + MPEndo))
\par   HisPctMP = 100 * (Dig_His_Flow / (MPBact + (MPFeed * 1000) + MPEndo))
\par   IlePctMP = 100 * (Dig_Ile_Flow / (MPBact + (MPFeed * 1000) + MPEndo))
\par   LeuPctMP = 100 * (Dig_Leu_Flow / (MPBact + (MPFeed * 1000) + MPEndo))
\par   LysPctMP = 100 * (Dig_Lys_Flow / (MPBact + (MPFeed * 1000) + MPEndo))
\par   MetPctMP = 100 * (Dig_Met_Flow / (MPBact + (MPFeed * 1000) + MPEndo))
\par   PhePctMP = 100 * (Dig_Phe_Flow / (MPBact + (MPFeed * 1000) + MPEndo))
\par   ThrPctMP = 100 * (Dig_Thr_Flow / (MPBact + (MPFeed * 1000) + MPEndo))
\par   ValPctMP = 100 * (Dig_Val_Flow / (MPBact + (MPFeed * 1000) + MPEndo))
\par Else
\par   ArgPctMP = 0
\par   HisPctMP = 0
\par   IlePctMP = 0
\par   LeuPctMP = 0
\par   LysPctMP = 0
\par   MetPctMP = 0
\par   PhePctMP = 0
\par   ThrPctMP = 0
\par   ValPctMP = 0
\par End If
\par 
\par 
\par End Sub
\par 
\par 
\par 
\par 
\par 
\par Private Sub EnergyAndProteinSupplyComputations()
\par 
\par Dim DMFed As Single
\par Dim NF As Integer
\par Dim X As Integer
\par 
\par Dim Kp As Single
\par Dim BW_DMI As Single
\par Dim ConcSum As Single
\par Dim PercentConc As Single
\par 
\par 
\par If NumFeeds > 0 Then
\par   NF = NumFeeds
\par Else
\par   Exit Sub
\par End If
\par 
\par ReDim DMI(1 To NF) As Single
\par ReDim TDN(1 To NF) As Single
\par ReDim TDN_Act(1 To NF) As Single
\par ReDim CP(1 To NF) As Single
\par ReDim RUP(1 To NF) As Single
\par ReDim RDP(1 To NF) As Single
\par ReDim NDF(1 To NF) As Single
\par ReDim ADF(1 To NF) As Single
\par ReDim PsgRate(1 To NF) As Single
\par 
\par 
\par Call ComputeEnergyValues
\par   
\par 
\par If BW > 0 Then
\par   BW_DMI = (TotalDMFed / BW) * 100
\par Else
\par   BW_DMI = 0
\par End If
\par 
\par 
\par ConcSum = 0
\par 
\par For X = 1 To NumFeeds
\par   If Feed(X).ForageDescrp = "Concentrate" Then
\par     ConcSum = ConcSum + Feed(X).DMFed
\par   End If
\par Next X
\par 
\par 
\par If TotalDMFed > 0 Then
\par   PercentConc = (ConcSum / TotalDMFed) * 100
\par Else
\par   PercentConc = 0
\par End If
\par 
\par 
\par For X = 1 To NumFeeds
\par   
\par    DMFed = Feed(X).DMFed
\par    DMI(X) = DMFed
\par   
\par    If Feed(X).Category <> "Vitamin/Mineral" Then
\par      TDN(X) = (Feed(X).TDN / 100) * (DMFed * 1000)
\par      TDN_Act(X) = (Feed(X).TDN_ActX / 100) * (DMFed * 1000)
\par    Else
\par      TDN(X) = 0
\par      TDN_Act(X) = 0
\par    End If
\par     
\par      
\par    CP(X) = (Feed(X).CP / 100) * (DMFed * 1000)
\par 
\par 
\par    ' Passage rate equations
\par    Select Case Feed(X).ForageDescrp
\par      Case "Concentrate"
\par        Kp = 2.904 + (1.375 * BW_DMI) - (0.02 * PercentConc)
\par      Case "Dry"
\par        Kp = 3.362 + (0.479 * BW_DMI) - (0.017 * Feed(X).NDF) - (0.007 * PercentConc)
\par      Case "Wet"
\par        Kp = 3.054 + (0.614 * BW_DMI)
\par      Case Else
\par        Kp = 0
\par    End Select
\par    
\par    
\par    ' Passage rate cannot be negative
\par    If Kp < 0 Then
\par      Kp = 0
\par    End If
\par    
\par    
\par    PsgRate(X) = Kp
\par    
\par 
\par    If (Feed(X).Kd + Kp) > 0 Then
\par      RDP(X) = ((Feed(X).Kd / (Feed(X).Kd + Kp)) * _
\par                   ((((Feed(X).PrtB / 100) * (Feed(X).CP / 100)) * Feed(X).DMFed))) _
\par                       + (((Feed(X).PrtA / 100) * (Feed(X).CP / 100)) * Feed(X).DMFed)
\par    Else
\par      RDP(X) = 0
\par    End If
\par    
\par    
\par    ' RDP cannot exceed the total CP
\par    If (RDP(X) * 1000) > CP(X) Then
\par      RDP(X) = CP(X) / 1000
\par    End If
\par      
\par   
\par    RUP(X) = (CP(X) - (RDP(X) * 1000)) / 1000
\par     
\par    NDF(X) = (Feed(X).NDF / 100) * DMFed
\par    ADF(X) = (Feed(X).ADF / 100) * DMFed
\par   
\par  Next X
\par  
\par   
\par  DMI_Total = 0
\par  TDN_Total = 0
\par  TDN_Act_Total = 0
\par  CP_Total = 0
\par  RUP_Total = 0
\par  TotalDigestedRUP = 0
\par  RDP_Total = 0
\par  NDF_Total = 0
\par  ADF_Total = 0
\par  
\par  
\par  For X = 1 To NumFeeds
\par  
\par   DMI_Total = DMI_Total + DMI(X)
\par   TDN_Total = TDN_Total + TDN(X)
\par   TDN_Act_Total = TDN_Act_Total + TDN_Act(X)
\par   CP_Total = CP_Total + CP(X)
\par   RUP_Total = RUP_Total + RUP(X)
\par   TotalDigestedRUP = TotalDigestedRUP + (RUP(X) * (Feed(X).RUPDigest / 100))
\par   RDP_Total = RDP_Total + RDP(X)
\par   NDF_Total = NDF_Total + NDF(X)
\par   ADF_Total = ADF_Total + ADF(X)
\par   
\par  Next X
\par  
\par  
\par  If RUP_Total > 0 Then
\par    DietRUPDigest = TotalDigestedRUP / RUP_Total
\par  Else
\par    DietRUPDigest = 0
\par  End If
\par  
\par  
\par  MCP_Total = 0.13 * TDN_Act_Total
\par  
\par  
\par 
\par  ' This condition assumes that microbial crude protein production cannot
\par  ' exceed 0.85 (efficiency of protein uptake of bacteria) of the ruminal degraded protein
\par  If MCP_Total > (0.85 * (RDP_Total * 1000)) Then
\par    MCP_Total = (0.85 * (RDP_Total * 1000))
\par  End If
\par  
\par  If MCP_Total < 0 Then
\par    MCP_Total = 0
\par  End If
\par  
\par  
\par  DietTDN = (TDN_Total / 1000) / TotalDMFed
\par 
\par 
\par If MEng_Total > 0 Then
\par   NEgOverMEng = NEg_Total / MEng_Total
\par   NElOverMEng = NEl_Total / MEng_Total
\par   NEmOverMEng = NEm_Total / MEng_Total
\par Else
\par   NEgOverMEng = 0
\par   NElOverMEng = 0
\par   NEmOverMEng = 0
\par End If
\par 
\par 
\par EndCP = 11.8 * TotalDMFed
\par MPEndo = 0.4 * EndCP
\par MPEndoReq = MPEndo / 0.67
\par 
\par 
\par End Sub
\par 
\par 
\par Private Sub TargetWeightsComputations()
\par 
\par SBW = 0.96 * BW
\par 
\par Age1st = FirstCalf
\par Age2nd = Age1st + CalfInt
\par Age3rd = Age2nd + CalfInt
\par Age1stBred = Age1st - (280 / 30.4)
\par   
\par Wt1stBred = MW * 0.55
\par Wt1st = MW * 0.82
\par Wt2nd = MW * 0.92
\par Wt3rd = MW
\par     
\par     
\par If (Age1stBred - Age) > 0 Then
\par   ADG1stBred = (Wt1stBred - BW) / ((Age1stBred - Age) * 30.4)
\par End If
\par 
\par If (Age1st - Age) > 0 Then
\par   ADG1st = (Wt1st - (BW - CW)) / ((Age1st - Age) * 30.4)
\par End If
\par 
\par If CalfInt > 0 Then
\par   ADG2nd = (Wt2nd - Wt1st) / (CalfInt * 30.4)
\par   ADG3rd = (Wt3rd - Wt2nd) / (CalfInt * 30.4)
\par End If
\par 
\par   
\par If AnimalType = "Replacement Heifer" Then
\par   If Age < Age1stBred Then
\par     ADGNonBred = (Wt1stBred - BW) / ((Age1stBred - Age) * 30.4)
\par   Else
\par     ADGNonBred = 0
\par   End If
\par Else
\par   ADGNonBred = 0
\par End If
\par 
\par If ADGNonBred < 0 Then
\par   ADGNonBred = 0
\par End If
\par   
\par   
\par If AnimalType = "Replacement Heifer" Then
\par   If (DaysPreg > 0) Then
\par     ADG = ADG1st
\par   Else
\par     ADG = ADG1stBred
\par   End If
\par Else
\par   If (Age >= Age3rd) Then
\par     ADG = 0
\par   ElseIf ((Age2nd <= Age) And (Age < Age3rd)) Then
\par     ADG = ADG3rd
\par   ElseIf ((Age1st <= Age) And (Age < Age2nd)) Then
\par     ADG = ADG2nd
\par   ElseIf ((Age1stBred <= Age) And (Age < Age1st)) Then
\par     ADG = ADG1st
\par   End If
\par End If
\par 
\par If ADG < 0 Then
\par   ADG = 0
\par End If
\par 
\par End Sub
\par 
\par 
\par 
\par Private Sub LactationComputations()
\par  
\par If MilkProd = 0 Then
\par   MilkEn = 0
\par   NELact = 0
\par   YProtn = 0
\par   YFatn = 0
\par   MPLact = 0
\par   FCM = 0
\par   
\par   Exit Sub
\par End If
\par  
\par  
\par If (Lactose = 0) Then
\par   MilkEn = (0.0929 * MilkFat) + (0.0547 * (MilkTrueProtein / 0.93)) + 0.192
\par Else
\par   MilkEn = (0.0929 * MilkFat) + (0.0547 * (MilkTrueProtein / 0.93)) + (0.0395 * Lactose)
\par End If
\par     
\par     
\par YEn = MilkEn * MilkProd
\par   
\par NELact = YEn
\par   
\par YProtn = MilkProd * (MilkTrueProtein / 100)
\par   
\par YFatn = MilkProd * (MilkFat / 100)
\par   
\par MPLact = (YProtn / 0.67) * 1000
\par  
\par FCM = (0.4 * MilkProd) + (15 * (MilkFat / 100) * MilkProd)
\par 
\par End Sub
\par 
\par 
\par 
\par 
\par Private Sub PregnancyComputations()
\par   
\par   
\par   Const Km = 0.64       ' Changed from 0.576 (Beef NRC value) on June 5, 2000
\par   Const EffMEPreg = 0.14
\par   Const EffMPPreg = 0.33
\par 
\par     
\par   If DaysPreg < 190 Then
\par     CW = 0
\par     ADGPreg = 0
\par     MEPreg = 0
\par     MPPreg = 0
\par   Else
\par     
\par     If DaysPreg > 279 Then
\par       DaysPreg = 279
\par     End If
\par     
\par     CW = (18 + ((DaysPreg - 190) * 0.665)) * (CBW / 45)
\par     ADGPreg = 665 * (CBW / 45)
\par     MEPreg = (((2 * 0.00159 * DaysPreg) - 0.0352) * (CBW / 45)) / EffMEPreg
\par     MPPreg = (((0.69 * DaysPreg) - 69.2) * (CBW / 45)) / EffMPPreg
\par   End If
\par 
\par   
\par   NEPreg = MEPreg * Km
\par   
\par 
\par   If DaysPreg = 0 Then
\par     MEPreg = 0
\par     MPPreg = 0
\par     ADGPreg = 0
\par     CW = 0
\par   End If
\par 
\par End Sub
\par 
\par 
\par 
\par Public Sub ComputeEnergyValues()
\par 
\par Dim tdNFC As Single                 ' truly digestible NFC
\par Dim tdCP As Single                  ' truly digestible CP
\par Dim tdFat As Single                 ' truly digestible Fat
\par Dim dNDF As Single                  ' digestible NDF
\par Dim DiscountVariable As Single      ' used to determine discount
\par   
\par   
\par Dim C As Byte
\par Dim DMFed As Single
\par Dim NF As Integer
\par Dim X As Integer
\par Dim SBW As Single
\par 
\par 
\par 
\par 
\par ' Reset total energy values
\par MEng_Total = 0
\par NEl_Total = 0
\par NEg_Total = 0
\par NEm_Total = 0
\par 
\par 
\par 
\par 
\par If NumFeeds > 0 Then
\par   NF = NumFeeds
\par Else
\par   Exit Sub
\par End If
\par 
\par 
\par 
\par ' Regular (i.e. non-calf) feeds can be used in a calf ration, so it
\par ' is necessary to differentitate between the TotalDMFed, which accouts
\par ' for all of the dry matter fed to the animal, and the Total Regular DMFed.
\par ' It is necessary to do this, since the total energy values computed in this
\par ' section are done so by first computing total energy concentration values,
\par ' then multiplying them by the total quantity values.  Thus there must be
\par ' a total regular feed fed value, since multiplying TotalDMFed * concentration
\par ' would (if calf feeds were present) over-estimate the computed total energy
\par TotalRegDMFed = 0
\par 
\par For X = 1 To NF
\par   If InStr(Feed(X).Category, "Calf Feed") = 0 Then
\par     TotalRegDMFed = TotalRegDMFed + Feed(X).DMFed
\par   End If
\par Next X
\par 
\par 
\par ' If there are no regular feeds, exit the procedure
\par If ((TotalRegDMFed = 0) And (AnimalType = "Young Calf")) Then
\par   Exit Sub
\par End If
\par 
\par 
\par 
\par 
\par SBW = 0.96 * BW
\par 
\par 
\par DietaryNFC = 0
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par ' Exit procedure if there are no feeds selected
\par If NumFeeds = 0 Then Exit Sub
\par 
\par 
\par For C = 1 To NumFeeds
\par   With Feed(C)
\par   
\par     If InStr(.Category, "Calf Feed") = 0 Then
\par 
\par       .NFCDigest = 0.98
\par 
\par       tdNFC = .NFCDigest * (100 - .NDF - .CP - .Fat - .Ash + .NDFIP) * .PAF
\par       DietaryNFC = DietaryNFC + (((100 - .NDF - .CP - .Fat - .Ash + .NDFIP) / 100) * .DMFed)
\par   
\par       If .CP > 0 Then
\par         If .EnergyEqClass = "Forage" Then
\par           tdCP = Exp((-1.2 * (.ADFIP / .CP))) * .CP
\par         Else
\par           If .Category = "Animal Protein" Then
\par             tdCP = (.CPDigest * .CP)
\par           Else
\par             tdCP = (1 - (0.4 * (.ADFIP / .CP))) * .CP
\par           End If
\par         End If
\par       Else
\par         tdCP = 0
\par       End If
\par   
\par   
\par       If .Fat < 1 Then
\par         tdFat = 0
\par       Else
\par         tdFat = (.Fat - 1) * 2.25
\par       End If
\par   
\par       
\par       If .NDF > .NDFIP Then
\par         dNDF = .NDFDigest * .NDF
\par       Else
\par         dNDF = 0
\par       End If
\par   
\par      
\par       If .Category = "Fat" Then
\par         If .EnergyEqClass = "Fatty Acid" Then
\par           .TDN = (.Fat * .FatDigest * 2.25)
\par           .DE = 0.094 * .FatDigest * .Fat
\par         Else
\par           .TDN = 10 + ((.Fat - 10) * .FatDigest * 2.25)
\par           .DE = (.FatDigest * (.Fat - 10) * 0.094) + 0.43
\par         End If
\par       Else
\par         If .Category = "Animal Protein" Then
\par           .TDN = (.CPDigest * .CP) + ((.Fat - 1) * 2.25) + ((.NFCDigest * (100 - .CP - .Ash - .Fat)) - 7)
\par           .DE = (tdNFC * 0.042) + (tdCP * 0.056) + (0.094 * (tdFat / 2.25)) - 0.3
\par         Else
\par           If dNDF > 0 Then
\par             .TDN = tdNFC + tdCP + tdFat + dNDF - 7
\par             .DE = (tdNFC * 0.042) + (dNDF * 0.042) + (tdCP * 0.056) + (0.094 * (tdFat / 2.25)) - 0.3
\par           Else
\par             If .CP > 0 Then
\par               .TDN = ((0.98 * .PAF) * (100 - .CP - .Fat - .Ash)) + (.CP * (1 - (0.4 * (.ADFIP / .CP)))) + ((2.25 * (.Fat - 1) - 7))
\par               .DE = (0.98 * .PAF) * (0.042 * (100 - .CP - .Fat - .Ash)) + (.CP * (0.056 * (1 - (0.4 * (.ADFIP / .CP))))) + (0.094 * (.Fat - 1)) - 0.3
\par             Else
\par               .TDN = ((0.98 * .PAF) * (100 - .Fat - .Ash)) + ((2.25 * (.Fat - 1) - 7))
\par               .DE = (0.98 * .PAF) * (0.042 * (100 - .Fat - .Ash)) + (0.094 * (.Fat - 1)) - 0.3
\par             End If
\par           End If
\par         End If
\par       End If
\par          
\par       
\par     
\par       ' Don't generate energy values for vitamin/minerals
\par       If .Category = "Vitamin/Mineral" Then
\par         .TDN = 0
\par         .DE = 0
\par       End If
\par     
\par     End If
\par   End With
\par Next C
\par 
\par   
\par    
\par 
\par   
\par ' These variables hold the values of DE and ME before a discount
\par ' is applied since the NEg equation used (from the 1996 Beef NRC)
\par ' uses an un-discounted ME in its equations
\par Dim UndiscountedME As Single
\par   
\par Dim TotalTDN As Single
\par Dim TDNConc As Single
\par   
\par   
\par TotalTDN = 0
\par   
\par For X = 1 To NumFeeds
\par   With Feed(X)
\par     If InStr(.Category, "Calf Feed") = 0 Then
\par       TotalTDN = TotalTDN + ((.TDN / 100) * .DMFed)
\par     End If
\par   End With
\par Next X
\par   
\par   
\par If AnimalType <> "Young Calf" Then
\par   If AnimalType = "Replacement Heifer" Then
\par     DMI_to_DMIMaint = TotalTDN / (0.035 * (SBW ^ 0.75))
\par   Else
\par     ' Note that this equation uses BW instead of SBW since it
\par     ' is for a mature animal
\par     DMI_to_DMIMaint = TotalTDN / (0.035 * (BW ^ 0.75))
\par   End If
\par Else
\par   ' The DMI for maintenance for a young calf is downstream
\par   ' from the energy computations, which require that the
\par   ' DMI/DMI_Maint value be estimated first.  This is a circular
\par   ' path which cannot be resolved, so instead this ratio is
\par   ' estimated using the equation for mature animals, given above.
\par   DMI_to_DMIMaint = TotalTDN / (0.035 * (CalfBW ^ 0.75))
\par End If
\par    
\par If TotalRegDMFed > 0 Then
\par   TDNConc = (TotalTDN / TotalRegDMFed) * 100
\par Else
\par   TDNConc = 0
\par End If
\par   
\par   
\par ' Compute total fat in diet
\par Fat_Total = 0
\par   
\par For C = 1 To NumFeeds
\par   If InStr(Feed(C).Category, "Calf Feed") = 0 Then
\par     Fat_Total = Fat_Total + ((Feed(C).Fat / 100) * Feed(C).DMFed)
\par   End If
\par Next C
\par 
\par Dim TotalFat As Single    ' This is the total fat in whole number units (e.g. 5% instead of 0.05)
\par 
\par If TotalRegDMFed > 0 Then
\par   TotalFat = (Fat_Total / TotalRegDMFed) * 100
\par Else
\par   TotalFat = 0
\par End If
\par 
\par 
\par Dim TotalDigestibleFat As Single
\par Dim DigestibleFat As Single
\par 
\par TotalDigestibleFat = 0
\par 
\par For C = 1 To NumFeeds
\par   With Feed(C)
\par     If .Category = "Fat" Then
\par       If .EnergyEqClass = "Fat" Then
\par         DigestibleFat = 10 + ((.Fat - 10) * .FatDigest)
\par       Else
\par         DigestibleFat = .Fat * .FatDigest
\par       End If
\par     Else
\par       DigestibleFat = .Fat - 1
\par     End If
\par     
\par     
\par     DigestibleFat = DigestibleFat * .DMFed
\par     
\par     TotalDigestibleFat = TotalDigestibleFat + DigestibleFat
\par   
\par   End With
\par Next C
\par 
\par 
\par If TotalDMFed > 0 Then
\par   TotalDigestibleFat = TotalDigestibleFat / TotalDMFed
\par Else
\par   TotalDigestibleFat = 0
\par End If
\par 
\par 
\par 
\par Dim Adj_TDN As Single
\par 
\par If TotalRegDMFed > 0 Then
\par   If (Fat_Total / TotalRegDMFed) > 0.03 Then
\par   
\par     If TotalFat > 0 Then
\par       Adj_TDN = TDNConc - (((TotalFat) - 3) * (TotalDigestibleFat / TotalFat) * 2.25)
\par     Else
\par       Adj_TDN = 0
\par     End If
\par     
\par     TDNConc = Adj_TDN / ((100 - (TotalFat - 3)) / 100)
\par   End If
\par End If
\par 
\par   
\par DiscountVariable = ((0.18 * TDNConc) - 10.3) * (DMI_to_DMIMaint - 1)
\par 
\par If DiscountVariable < 0 Then
\par   DiscountVariable = 0
\par End If
\par 
\par   
\par If TDNConc < 60 Then
\par   Discount = 1
\par ElseIf ((TDNConc > 60) And ((TDNConc - DiscountVariable) < 60)) Then
\par   Discount = 60 / TDNConc
\par ElseIf TDNConc > 0 Then
\par   Discount = (TDNConc - DiscountVariable) / TDNConc
\par Else
\par   Discount = 1
\par End If
\par 
\par   
\par ' TDN Discount cannot be negative
\par If Discount < 0 Then
\par   Discount = 1
\par End If
\par   
\par   
\par   
\par 
\par ' Discount the TDN
\par For C = 1 To NumFeeds
\par     
\par   With Feed(C)
\par          
\par     If InStr(.Category, "Calf Feed") = 0 Then
\par       .TDN_ActX = .TDN * Discount
\par     End If
\par   End With
\par     
\par Next C
\par   
\par   
\par   
\par   
\par 
\par 
\par ' Note :  This value has units of %DM
\par If TotalRegDMFed > 0 Then
\par   Fat_Total = (Fat_Total / TotalRegDMFed) * 100
\par Else
\par   Fat_Total = 0
\par End If
\par 
\par 
\par 
\par 
\par 
\par For C = 1 To NumFeeds
\par   With Feed(C)
\par     .DiscDE = Discount * .DE
\par     
\par     If .Fat >= 3 Then
\par       If (AnimalType <> "Replacement Heifer") Then
\par         .MEng = (1.01 * .DiscDE) - 0.45 + (0.0046 * (.Fat - 3))
\par       Else
\par         .MEng = 0.82 * .DE
\par       End If
\par       
\par       .NEl = (0.703 * .MEng) - 0.19 + ((((0.097 * .MEng) + 0.19) / 97) * (.Fat - 3))
\par     Else
\par       If ((AnimalType <> "Young Calf") And (AnimalType <> "Replacement Heifer")) Then
\par         .MEng = (1.01 * .DiscDE) - 0.45
\par       Else
\par         .MEng = 0.82 * .DE
\par       End If
\par       
\par       .NEl = (0.703 * .MEng) - 0.19
\par     End If
\par     
\par     
\par     If .Category <> "Fat" Then
\par       .MEforNEg = 0.82 * .DE
\par     
\par       .NEg = ((1.42 * .MEforNEg) - (0.174 * (.MEforNEg ^ 2)) _
\par                         + (0.0122 * (.MEforNEg ^ 3)) - 1.65)
\par                         
\par       If .NEg < 0 Then
\par         .NEg = 0
\par       End If
\par     
\par     
\par       .NEm = ((1.37 * .MEforNEg) - (0.138 * (.MEforNEg ^ 2)) _
\par                           + (0.0105 * (.MEforNEg ^ 3)) - 1.12)
\par     Else
\par       .MEng = .DiscDE
\par       .NEl = 0.8 * .DiscDE
\par       .NEm = 0.8 * .MEng
\par       .NEg = 0.55 * .MEng
\par     End If
\par     
\par     
\par     ' Non-negativity constraints
\par     If .MEng < 0 Then
\par       .MEng = 0
\par     End If
\par     
\par     If .NEl < 0 Then
\par       .NEl = 0
\par     End If
\par     
\par     If .NEm < 0 Then
\par       .NEm = 0
\par     End If
\par     
\par     If .NEg < 0 Then
\par       .NEg = 0
\par     End If
\par          
\par     
\par     MEng_Total = MEng_Total + (.MEng * .DMFed)
\par     NEl_Total = NEl_Total + (.NEl * .DMFed)
\par     NEg_Total = NEg_Total + (.NEg * .DMFed)
\par     NEm_Total = NEm_Total + (.NEm * .DMFed)
\par   End With
\par Next C
\par 
\par 
\par 
\par ' These variables are total concentration values (Mcal/kg)
\par Dim TotalDEConc As Single
\par Dim TotalMEConc As Single
\par Dim TotalNEmConc As Single
\par Dim TotalNElConc As Single
\par Dim TotalNEgConc As Single
\par 
\par 
\par If TotalRegDMFed > 0 Then
\par   TotalMEConc = MEng_Total / TotalRegDMFed
\par   TotalNElConc = NEl_Total / TotalRegDMFed
\par   TotalNEgConc = NEg_Total / TotalRegDMFed
\par   TotalNEmConc = NEm_Total / TotalRegDMFed
\par Else
\par   TotalMEConc = 0
\par   TotalNElConc = 0
\par   TotalNEgConc = 0
\par   TotalNEmConc = 0
\par End If
\par   
\par   
\par If AnimalType <> "Replacement Heifer" Then
\par   If TotalRegDMFed > 0 Then
\par     NEDietConc = NEl_Total / TotalRegDMFed
\par   Else
\par     NEDietConc = 0
\par   End If
\par Else
\par   If TotalRegDMFed > 0 Then
\par     NEDietConc = NEm_Total / TotalRegDMFed
\par   Else
\par     NEDietConc = 0
\par   End If
\par End If
\par   
\par   
\par     
\par End Sub
\par 
\par 
\par 
\par Public Function MW_From_Breed(Br As String) As Integer
\par 
\par Select Case Br
\par   Case "Ayrshire"
\par     MW_From_Breed = 545
\par   Case "Brown Swiss"
\par     MW_From_Breed = 682
\par   Case "Guernsey"
\par     MW_From_Breed = 500
\par   Case "Holstein"
\par     MW_From_Breed = 682
\par   Case "Jersey"
\par     MW_From_Breed = 454
\par   Case "Milking Shorthorn"
\par     MW_From_Breed = 568
\par End Select
\par 
\par End Function
\par 
\par 
\par 
\par Public Function CBW_From_MW() As Single
\par 
\par   CBW_From_MW = 0.06275 * MW
\par 
\par End Function
\par 
\par }}